ARM GAS  /tmp/cc5dAlVC.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.section	.rodata.str1.1,"aMS",%progbits,1
  13              	.LC0:
  14 0000 64656661 		.ascii	"defaultTask\000"
  14      756C7454 
  14      61736B00 
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.StartDefaultTask,"ax",%progbits
  19              		.align	1
  20              		.global	StartDefaultTask
  21              		.arch armv6s-m
  22              		.syntax unified
  23              		.code	16
  24              		.thumb_func
  25              		.fpu softvfp
  27              	StartDefaultTask:
  28              	.LFB1076:
  29              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** #include "usbpd.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
ARM GAS  /tmp/cc5dAlVC.s 			page 2


  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** uint16_t adc;
  43:Src/main.c    **** float vin;
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** ADC_HandleTypeDef hadc1;
  48:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  49:Src/main.c    **** 
  50:Src/main.c    **** UART_HandleTypeDef hlpuart1;
  51:Src/main.c    **** DMA_HandleTypeDef hdma_lpuart1_tx;
  52:Src/main.c    **** 
  53:Src/main.c    **** osThreadId defaultTaskHandle;
  54:Src/main.c    **** /* USER CODE BEGIN PV */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  59:Src/main.c    **** void SystemClock_Config(void);
  60:Src/main.c    **** static void MX_GPIO_Init(void);
  61:Src/main.c    **** static void MX_DMA_Init(void);
  62:Src/main.c    **** static void MX_ADC1_Init(void);
  63:Src/main.c    **** static void MX_UCPD2_Init(void);
  64:Src/main.c    **** static void MX_LPUART1_UART_Init(void);
  65:Src/main.c    **** void StartDefaultTask(void const * argument);
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE BEGIN PFP */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END PFP */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  72:Src/main.c    **** /* USER CODE BEGIN 0 */
  73:Src/main.c    **** /* USER CODE END 0 */
  74:Src/main.c    **** 
  75:Src/main.c    **** /**
  76:Src/main.c    ****   * @brief  The application entry point.
  77:Src/main.c    ****   * @retval int
  78:Src/main.c    ****   */
  79:Src/main.c    **** int main(void)
  80:Src/main.c    **** {
  81:Src/main.c    ****   /* USER CODE BEGIN 1 */
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* USER CODE END 1 */
  84:Src/main.c    **** 
ARM GAS  /tmp/cc5dAlVC.s 			page 3


  85:Src/main.c    **** 
  86:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  89:Src/main.c    ****   HAL_Init();
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* USER CODE BEGIN Init */
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE END Init */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* Configure the system clock */
  96:Src/main.c    ****   SystemClock_Config();
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE END SysInit */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Initialize all configured peripherals */
 103:Src/main.c    ****   MX_GPIO_Init();
 104:Src/main.c    ****   MX_DMA_Init();
 105:Src/main.c    ****   MX_ADC1_Init();
 106:Src/main.c    ****   MX_UCPD2_Init();
 107:Src/main.c    ****   MX_USBPD_Init();
 108:Src/main.c    ****   MX_LPUART1_UART_Init();
 109:Src/main.c    ****   /* USER CODE BEGIN 2 */
 110:Src/main.c    ****   HAL_ADCEx_Calibration_Start(&hadc1);
 111:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 112:Src/main.c    ****   /* USER CODE END 2 */
 113:Src/main.c    ****   /* USBPD initialisation ---------------------------------*/
 114:Src/main.c    ****   MX_USBPD_Init();
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 117:Src/main.c    ****   /* add mutexes, ... */
 118:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 121:Src/main.c    ****   /* add semaphores, ... */
 122:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 125:Src/main.c    ****   /* start timers, add new ones, ... */
 126:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 129:Src/main.c    ****   /* add queues, ... */
 130:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* Create the thread(s) */
 133:Src/main.c    ****   /* definition and creation of defaultTask */
 134:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 135:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 138:Src/main.c    ****   /* add threads, ... */
 139:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* Start scheduler */
ARM GAS  /tmp/cc5dAlVC.s 			page 4


 142:Src/main.c    ****   osKernelStart();
 143:Src/main.c    **** 
 144:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 145:Src/main.c    **** 
 146:Src/main.c    ****   /* Infinite loop */
 147:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 148:Src/main.c    ****   while (1)
 149:Src/main.c    ****   {
 150:Src/main.c    ****     /* USER CODE END WHILE */
 151:Src/main.c    **** 
 152:Src/main.c    ****     /* USER CODE BEGIN 3 */
 153:Src/main.c    ****   }
 154:Src/main.c    ****   /* USER CODE END 3 */
 155:Src/main.c    **** }
 156:Src/main.c    **** 
 157:Src/main.c    **** /**
 158:Src/main.c    ****   * @brief System Clock Configuration
 159:Src/main.c    ****   * @retval None
 160:Src/main.c    ****   */
 161:Src/main.c    **** void SystemClock_Config(void)
 162:Src/main.c    **** {
 163:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 164:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 165:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 166:Src/main.c    **** 
 167:Src/main.c    ****   /** Configure the main internal regulator output voltage
 168:Src/main.c    ****   */
 169:Src/main.c    ****   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 170:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 171:Src/main.c    ****   */
 172:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 173:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 174:Src/main.c    ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 175:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 176:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 8;
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 183:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 184:Src/main.c    ****   {
 185:Src/main.c    ****     Error_Handler();
 186:Src/main.c    ****   }
 187:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 188:Src/main.c    ****   */
 189:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 190:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 191:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 192:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 193:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 194:Src/main.c    **** 
 195:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 196:Src/main.c    ****   {
 197:Src/main.c    ****     Error_Handler();
 198:Src/main.c    ****   }
ARM GAS  /tmp/cc5dAlVC.s 			page 5


 199:Src/main.c    ****   /** Initializes the peripherals clocks
 200:Src/main.c    ****   */
 201:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC;
 202:Src/main.c    ****   PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 203:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 204:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 205:Src/main.c    ****   {
 206:Src/main.c    ****     Error_Handler();
 207:Src/main.c    ****   }
 208:Src/main.c    **** }
 209:Src/main.c    **** 
 210:Src/main.c    **** /**
 211:Src/main.c    ****   * @brief ADC1 Initialization Function
 212:Src/main.c    ****   * @param None
 213:Src/main.c    ****   * @retval None
 214:Src/main.c    ****   */
 215:Src/main.c    **** static void MX_ADC1_Init(void)
 216:Src/main.c    **** {
 217:Src/main.c    **** 
 218:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 219:Src/main.c    **** 
 220:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 221:Src/main.c    **** 
 222:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 223:Src/main.c    **** 
 224:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 225:Src/main.c    **** 
 226:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 227:Src/main.c    ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 228:Src/main.c    ****   */
 229:Src/main.c    ****   hadc1.Instance = ADC1;
 230:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 231:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 232:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 233:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 234:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 235:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 236:Src/main.c    ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 237:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 238:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 239:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 240:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 241:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 242:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 243:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 244:Src/main.c    ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 245:Src/main.c    ****   hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 246:Src/main.c    ****   hadc1.Init.OversamplingMode = DISABLE;
 247:Src/main.c    ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 248:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 249:Src/main.c    ****   {
 250:Src/main.c    ****     Error_Handler();
 251:Src/main.c    ****   }
 252:Src/main.c    ****   /** Configure Regular Channel
 253:Src/main.c    ****   */
 254:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 255:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
ARM GAS  /tmp/cc5dAlVC.s 			page 6


 256:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 257:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 258:Src/main.c    ****   {
 259:Src/main.c    ****     Error_Handler();
 260:Src/main.c    ****   }
 261:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 262:Src/main.c    **** 
 263:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 264:Src/main.c    **** 
 265:Src/main.c    **** }
 266:Src/main.c    **** 
 267:Src/main.c    **** /**
 268:Src/main.c    ****   * @brief LPUART1 Initialization Function
 269:Src/main.c    ****   * @param None
 270:Src/main.c    ****   * @retval None
 271:Src/main.c    ****   */
 272:Src/main.c    **** static void MX_LPUART1_UART_Init(void)
 273:Src/main.c    **** {
 274:Src/main.c    **** 
 275:Src/main.c    ****   /* USER CODE BEGIN LPUART1_Init 0 */
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* USER CODE END LPUART1_Init 0 */
 278:Src/main.c    **** 
 279:Src/main.c    ****   /* USER CODE BEGIN LPUART1_Init 1 */
 280:Src/main.c    **** 
 281:Src/main.c    ****   /* USER CODE END LPUART1_Init 1 */
 282:Src/main.c    ****   hlpuart1.Instance = LPUART1;
 283:Src/main.c    ****   hlpuart1.Init.BaudRate = 209700;
 284:Src/main.c    ****   hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 285:Src/main.c    ****   hlpuart1.Init.StopBits = UART_STOPBITS_1;
 286:Src/main.c    ****   hlpuart1.Init.Parity = UART_PARITY_NONE;
 287:Src/main.c    ****   hlpuart1.Init.Mode = UART_MODE_TX_RX;
 288:Src/main.c    ****   hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 289:Src/main.c    ****   hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 290:Src/main.c    ****   hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 291:Src/main.c    ****   hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 292:Src/main.c    ****   hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 293:Src/main.c    ****   if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 294:Src/main.c    ****   {
 295:Src/main.c    ****     Error_Handler();
 296:Src/main.c    ****   }
 297:Src/main.c    ****   if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 298:Src/main.c    ****   {
 299:Src/main.c    ****     Error_Handler();
 300:Src/main.c    ****   }
 301:Src/main.c    ****   if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 302:Src/main.c    ****   {
 303:Src/main.c    ****     Error_Handler();
 304:Src/main.c    ****   }
 305:Src/main.c    ****   if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 306:Src/main.c    ****   {
 307:Src/main.c    ****     Error_Handler();
 308:Src/main.c    ****   }
 309:Src/main.c    ****   /* USER CODE BEGIN LPUART1_Init 2 */
 310:Src/main.c    **** 
 311:Src/main.c    ****   /* USER CODE END LPUART1_Init 2 */
 312:Src/main.c    **** 
ARM GAS  /tmp/cc5dAlVC.s 			page 7


 313:Src/main.c    **** }
 314:Src/main.c    **** 
 315:Src/main.c    **** /**
 316:Src/main.c    ****   * @brief UCPD2 Initialization Function
 317:Src/main.c    ****   * @param None
 318:Src/main.c    ****   * @retval None
 319:Src/main.c    ****   */
 320:Src/main.c    **** static void MX_UCPD2_Init(void)
 321:Src/main.c    **** {
 322:Src/main.c    **** 
 323:Src/main.c    ****   /* USER CODE BEGIN UCPD2_Init 0 */
 324:Src/main.c    **** 
 325:Src/main.c    ****   /* USER CODE END UCPD2_Init 0 */
 326:Src/main.c    **** 
 327:Src/main.c    ****   /* Peripheral clock enable */
 328:Src/main.c    ****   LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 329:Src/main.c    **** 
 330:Src/main.c    ****   /* UCPD2 DMA Init */
 331:Src/main.c    **** 
 332:Src/main.c    ****   /* UCPD2_RX Init */
 333:Src/main.c    ****   LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD2_RX);
 334:Src/main.c    **** 
 335:Src/main.c    ****   LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 336:Src/main.c    **** 
 337:Src/main.c    ****   LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 338:Src/main.c    **** 
 339:Src/main.c    ****   LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 340:Src/main.c    **** 
 341:Src/main.c    ****   LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 342:Src/main.c    **** 
 343:Src/main.c    ****   LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 344:Src/main.c    **** 
 345:Src/main.c    ****   LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 346:Src/main.c    **** 
 347:Src/main.c    ****   LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 348:Src/main.c    **** 
 349:Src/main.c    ****   /* UCPD2_TX Init */
 350:Src/main.c    ****   LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_UCPD2_TX);
 351:Src/main.c    **** 
 352:Src/main.c    ****   LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 353:Src/main.c    **** 
 354:Src/main.c    ****   LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 355:Src/main.c    **** 
 356:Src/main.c    ****   LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 357:Src/main.c    **** 
 358:Src/main.c    ****   LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 359:Src/main.c    **** 
 360:Src/main.c    ****   LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 361:Src/main.c    **** 
 362:Src/main.c    ****   LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 363:Src/main.c    **** 
 364:Src/main.c    ****   LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 365:Src/main.c    **** 
 366:Src/main.c    ****   /* UCPD2 interrupt Init */
 367:Src/main.c    ****   NVIC_SetPriority(UCPD1_2_IRQn, 3);
 368:Src/main.c    ****   NVIC_EnableIRQ(UCPD1_2_IRQn);
 369:Src/main.c    **** 
ARM GAS  /tmp/cc5dAlVC.s 			page 8


 370:Src/main.c    ****   /* USER CODE BEGIN UCPD2_Init 1 */
 371:Src/main.c    **** 
 372:Src/main.c    ****   /* USER CODE END UCPD2_Init 1 */
 373:Src/main.c    ****   /* USER CODE BEGIN UCPD2_Init 2 */
 374:Src/main.c    **** 
 375:Src/main.c    ****   /* USER CODE END UCPD2_Init 2 */
 376:Src/main.c    **** 
 377:Src/main.c    **** }
 378:Src/main.c    **** 
 379:Src/main.c    **** /**
 380:Src/main.c    ****   * Enable DMA controller clock
 381:Src/main.c    ****   */
 382:Src/main.c    **** static void MX_DMA_Init(void)
 383:Src/main.c    **** {
 384:Src/main.c    **** 
 385:Src/main.c    ****   /* DMA controller clock enable */
 386:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 387:Src/main.c    **** 
 388:Src/main.c    ****   /* DMA interrupt init */
 389:Src/main.c    ****   /* DMA1_Channel1_IRQn interrupt configuration */
 390:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 391:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 392:Src/main.c    ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 393:Src/main.c    ****   NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3);
 394:Src/main.c    ****   NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 395:Src/main.c    ****   /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
 396:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 397:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 398:Src/main.c    **** 
 399:Src/main.c    **** }
 400:Src/main.c    **** 
 401:Src/main.c    **** /**
 402:Src/main.c    ****   * @brief GPIO Initialization Function
 403:Src/main.c    ****   * @param None
 404:Src/main.c    ****   * @retval None
 405:Src/main.c    ****   */
 406:Src/main.c    **** static void MX_GPIO_Init(void)
 407:Src/main.c    **** {
 408:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 409:Src/main.c    **** 
 410:Src/main.c    ****   /* GPIO Ports Clock Enable */
 411:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 412:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 413:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 414:Src/main.c    **** 
 415:Src/main.c    ****   /*Configure GPIO pin Output Level */
 416:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 417:Src/main.c    **** 
 418:Src/main.c    ****   /*Configure GPIO pin : PB13 */
 419:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 420:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 421:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 422:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 423:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 424:Src/main.c    **** 
 425:Src/main.c    **** }
 426:Src/main.c    **** 
ARM GAS  /tmp/cc5dAlVC.s 			page 9


 427:Src/main.c    **** /* USER CODE BEGIN 4 */
 428:Src/main.c    **** 
 429:Src/main.c    **** /* USER CODE END 4 */
 430:Src/main.c    **** 
 431:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 432:Src/main.c    **** /**
 433:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 434:Src/main.c    ****   * @param  argument: Not used
 435:Src/main.c    ****   * @retval None
 436:Src/main.c    ****   */
 437:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 438:Src/main.c    **** void StartDefaultTask(void const * argument)
 439:Src/main.c    **** {
  30              		.loc 1 439 1 view -0
  31              		.cfi_startproc
  32              		@ Volatile: function does not return.
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              	.LVL0:
  36              		.loc 1 439 1 is_stmt 0 view .LVU1
  37 0000 10B5     		push	{r4, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 4, -8
  41              		.cfi_offset 14, -4
  42              	.LVL1:
  43              	.L2:
 440:Src/main.c    ****   /* USER CODE BEGIN 5 */
 441:Src/main.c    ****   /* Infinite loop */
 442:Src/main.c    ****   for(;;)
  44              		.loc 1 442 3 is_stmt 1 discriminator 1 view .LVU2
 443:Src/main.c    ****   {
 444:Src/main.c    ****     osDelay(1);
  45              		.loc 1 444 5 discriminator 1 view .LVU3
  46 0002 0120     		movs	r0, #1
  47 0004 FFF7FEFF 		bl	osDelay
  48              	.LVL2:
 442:Src/main.c    ****   {
  49              		.loc 1 442 8 discriminator 1 view .LVU4
  50 0008 FBE7     		b	.L2
  51              		.cfi_endproc
  52              	.LFE1076:
  54              		.section	.text.SystemClock_Config,"ax",%progbits
  55              		.align	1
  56              		.global	SystemClock_Config
  57              		.syntax unified
  58              		.code	16
  59              		.thumb_func
  60              		.fpu softvfp
  62              	SystemClock_Config:
  63              	.LFB1070:
 162:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  64              		.loc 1 162 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 128
  67              		@ frame_needed = 0, uses_anonymous_args = 0
 163:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
ARM GAS  /tmp/cc5dAlVC.s 			page 10


  68              		.loc 1 163 3 view .LVU6
 162:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  69              		.loc 1 162 1 is_stmt 0 view .LVU7
  70 0000 30B5     		push	{r4, r5, lr}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 12
  73              		.cfi_offset 4, -12
  74              		.cfi_offset 5, -8
  75              		.cfi_offset 14, -4
  76 0002 A1B0     		sub	sp, sp, #132
  77              	.LCFI2:
  78              		.cfi_def_cfa_offset 144
 163:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  79              		.loc 1 163 22 view .LVU8
  80 0004 3822     		movs	r2, #56
  81 0006 0021     		movs	r1, #0
  82 0008 12A8     		add	r0, sp, #72
  83 000a FFF7FEFF 		bl	memset
  84              	.LVL3:
 164:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  85              		.loc 1 164 3 is_stmt 1 view .LVU9
 164:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  86              		.loc 1 164 22 is_stmt 0 view .LVU10
  87 000e 1022     		movs	r2, #16
  88 0010 0021     		movs	r1, #0
  89 0012 01A8     		add	r0, sp, #4
  90 0014 FFF7FEFF 		bl	memset
  91              	.LVL4:
 165:Src/main.c    **** 
  92              		.loc 1 165 3 is_stmt 1 view .LVU11
 165:Src/main.c    **** 
  93              		.loc 1 165 28 is_stmt 0 view .LVU12
  94 0018 3422     		movs	r2, #52
  95 001a 0021     		movs	r1, #0
  96 001c 05A8     		add	r0, sp, #20
  97 001e FFF7FEFF 		bl	memset
  98              	.LVL5:
 169:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
  99              		.loc 1 169 3 is_stmt 1 view .LVU13
 100 0022 8020     		movs	r0, #128
 101 0024 8000     		lsls	r0, r0, #2
 102 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 103              	.LVL6:
 172:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 104              		.loc 1 172 3 view .LVU14
 173:Src/main.c    ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 105              		.loc 1 173 30 is_stmt 0 view .LVU15
 106 002a 8023     		movs	r3, #128
 107 002c 5B00     		lsls	r3, r3, #1
 108 002e 1593     		str	r3, [sp, #84]
 175:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 109              		.loc 1 175 41 view .LVU16
 110 0030 C03B     		subs	r3, r3, #192
 111 0032 1793     		str	r3, [sp, #92]
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 112              		.loc 1 179 30 view .LVU17
 113 0034 383B     		subs	r3, r3, #56
ARM GAS  /tmp/cc5dAlVC.s 			page 11


 114 0036 1C93     		str	r3, [sp, #112]
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 115              		.loc 1 180 30 view .LVU18
 116 0038 8023     		movs	r3, #128
 117 003a 9B02     		lsls	r3, r3, #10
 118 003c 1D93     		str	r3, [sp, #116]
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 119              		.loc 1 181 30 view .LVU19
 120 003e 8023     		movs	r3, #128
 121 0040 9B04     		lsls	r3, r3, #18
 122 0042 1E93     		str	r3, [sp, #120]
 182:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 123              		.loc 1 182 30 view .LVU20
 124 0044 8023     		movs	r3, #128
 172:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 125              		.loc 1 172 36 view .LVU21
 126 0046 0225     		movs	r5, #2
 174:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 127              		.loc 1 174 28 view .LVU22
 128 0048 0024     		movs	r4, #0
 182:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 129              		.loc 1 182 30 view .LVU23
 130 004a 9B05     		lsls	r3, r3, #22
 183:Src/main.c    ****   {
 131              		.loc 1 183 7 view .LVU24
 132 004c 12A8     		add	r0, sp, #72
 182:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 133              		.loc 1 182 30 view .LVU25
 134 004e 1F93     		str	r3, [sp, #124]
 172:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 135              		.loc 1 172 36 view .LVU26
 136 0050 1295     		str	r5, [sp, #72]
 173:Src/main.c    ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 137              		.loc 1 173 3 is_stmt 1 view .LVU27
 174:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 138              		.loc 1 174 3 view .LVU28
 174:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 139              		.loc 1 174 28 is_stmt 0 view .LVU29
 140 0052 1694     		str	r4, [sp, #88]
 175:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 141              		.loc 1 175 3 is_stmt 1 view .LVU30
 176:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 142              		.loc 1 176 3 view .LVU31
 176:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 143              		.loc 1 176 34 is_stmt 0 view .LVU32
 144 0054 1995     		str	r5, [sp, #100]
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 145              		.loc 1 177 3 is_stmt 1 view .LVU33
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 146              		.loc 1 177 35 is_stmt 0 view .LVU34
 147 0056 1A95     		str	r5, [sp, #104]
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 8;
 148              		.loc 1 178 3 is_stmt 1 view .LVU35
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 8;
 149              		.loc 1 178 30 is_stmt 0 view .LVU36
 150 0058 1B94     		str	r4, [sp, #108]
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
ARM GAS  /tmp/cc5dAlVC.s 			page 12


 151              		.loc 1 179 3 is_stmt 1 view .LVU37
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 152              		.loc 1 180 3 view .LVU38
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 153              		.loc 1 181 3 view .LVU39
 182:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 154              		.loc 1 182 3 view .LVU40
 183:Src/main.c    ****   {
 155              		.loc 1 183 3 view .LVU41
 183:Src/main.c    ****   {
 156              		.loc 1 183 7 is_stmt 0 view .LVU42
 157 005a FFF7FEFF 		bl	HAL_RCC_OscConfig
 158              	.LVL7:
 189:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 159              		.loc 1 189 3 is_stmt 1 view .LVU43
 189:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 160              		.loc 1 189 31 is_stmt 0 view .LVU44
 161 005e 0723     		movs	r3, #7
 195:Src/main.c    ****   {
 162              		.loc 1 195 7 view .LVU45
 163 0060 2900     		movs	r1, r5
 164 0062 01A8     		add	r0, sp, #4
 189:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 165              		.loc 1 189 31 view .LVU46
 166 0064 0193     		str	r3, [sp, #4]
 191:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 167              		.loc 1 191 3 is_stmt 1 view .LVU47
 191:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 168              		.loc 1 191 34 is_stmt 0 view .LVU48
 169 0066 0295     		str	r5, [sp, #8]
 192:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 170              		.loc 1 192 3 is_stmt 1 view .LVU49
 192:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 171              		.loc 1 192 35 is_stmt 0 view .LVU50
 172 0068 0394     		str	r4, [sp, #12]
 193:Src/main.c    **** 
 173              		.loc 1 193 3 is_stmt 1 view .LVU51
 193:Src/main.c    **** 
 174              		.loc 1 193 36 is_stmt 0 view .LVU52
 175 006a 0494     		str	r4, [sp, #16]
 195:Src/main.c    ****   {
 176              		.loc 1 195 3 is_stmt 1 view .LVU53
 195:Src/main.c    ****   {
 177              		.loc 1 195 7 is_stmt 0 view .LVU54
 178 006c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 179              	.LVL8:
 201:Src/main.c    ****   PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 180              		.loc 1 201 3 is_stmt 1 view .LVU55
 201:Src/main.c    ****   PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 181              		.loc 1 201 38 is_stmt 0 view .LVU56
 182 0070 054B     		ldr	r3, .L4
 204:Src/main.c    ****   {
 183              		.loc 1 204 7 view .LVU57
 184 0072 05A8     		add	r0, sp, #20
 201:Src/main.c    ****   PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 185              		.loc 1 201 38 view .LVU58
 186 0074 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/cc5dAlVC.s 			page 13


 202:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 187              		.loc 1 202 3 is_stmt 1 view .LVU59
 203:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 188              		.loc 1 203 35 is_stmt 0 view .LVU60
 189 0076 8023     		movs	r3, #128
 190 0078 DB05     		lsls	r3, r3, #23
 202:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 191              		.loc 1 202 39 view .LVU61
 192 007a 0894     		str	r4, [sp, #32]
 203:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 193              		.loc 1 203 3 is_stmt 1 view .LVU62
 203:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 194              		.loc 1 203 35 is_stmt 0 view .LVU63
 195 007c 0D93     		str	r3, [sp, #52]
 204:Src/main.c    ****   {
 196              		.loc 1 204 3 is_stmt 1 view .LVU64
 204:Src/main.c    ****   {
 197              		.loc 1 204 7 is_stmt 0 view .LVU65
 198 007e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 199              	.LVL9:
 208:Src/main.c    **** 
 200              		.loc 1 208 1 view .LVU66
 201 0082 21B0     		add	sp, sp, #132
 202              		@ sp needed
 203 0084 30BD     		pop	{r4, r5, pc}
 204              	.L5:
 205 0086 C046     		.align	2
 206              	.L4:
 207 0088 20400000 		.word	16416
 208              		.cfi_endproc
 209              	.LFE1070:
 211              		.section	.text.startup.main,"ax",%progbits
 212              		.align	1
 213              		.global	main
 214              		.syntax unified
 215              		.code	16
 216              		.thumb_func
 217              		.fpu softvfp
 219              	main:
 220              	.LFB1069:
  80:Src/main.c    ****   /* USER CODE BEGIN 1 */
 221              		.loc 1 80 1 is_stmt 1 view -0
 222              		.cfi_startproc
 223              		@ Volatile: function does not return.
 224              		@ args = 0, pretend = 0, frame = 40
 225              		@ frame_needed = 0, uses_anonymous_args = 0
  89:Src/main.c    **** 
 226              		.loc 1 89 3 view .LVU68
  80:Src/main.c    ****   /* USER CODE BEGIN 1 */
 227              		.loc 1 80 1 is_stmt 0 view .LVU69
 228 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 229              	.LCFI3:
 230              		.cfi_def_cfa_offset 20
 231              		.cfi_offset 4, -20
 232              		.cfi_offset 5, -16
 233              		.cfi_offset 6, -12
 234              		.cfi_offset 7, -8
ARM GAS  /tmp/cc5dAlVC.s 			page 14


 235              		.cfi_offset 14, -4
 236              	.LBB81:
 237              	.LBB82:
 238              	.LBB83:
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 239              		.loc 1 411 3 view .LVU70
 240 0002 0125     		movs	r5, #1
 241              	.LBE83:
 242              	.LBE82:
 243              	.LBE81:
  80:Src/main.c    ****   /* USER CODE BEGIN 1 */
 244              		.loc 1 80 1 view .LVU71
 245 0004 8BB0     		sub	sp, sp, #44
 246              	.LCFI4:
 247              		.cfi_def_cfa_offset 64
 248              	.LBB95:
 249              	.LBB93:
 408:Src/main.c    **** 
 250              		.loc 1 408 20 view .LVU72
 251 0006 05AF     		add	r7, sp, #20
 252              	.LBE93:
 253              	.LBE95:
  89:Src/main.c    **** 
 254              		.loc 1 89 3 view .LVU73
 255 0008 FFF7FEFF 		bl	HAL_Init
 256              	.LVL10:
  96:Src/main.c    **** 
 257              		.loc 1 96 3 is_stmt 1 view .LVU74
 258 000c FFF7FEFF 		bl	SystemClock_Config
 259              	.LVL11:
 103:Src/main.c    ****   MX_DMA_Init();
 260              		.loc 1 103 3 view .LVU75
 261              	.LBB96:
 262              	.LBI81:
 406:Src/main.c    **** {
 263              		.loc 1 406 13 view .LVU76
 264              	.LBB94:
 408:Src/main.c    **** 
 265              		.loc 1 408 3 view .LVU77
 408:Src/main.c    **** 
 266              		.loc 1 408 20 is_stmt 0 view .LVU78
 267 0010 1422     		movs	r2, #20
 268 0012 0021     		movs	r1, #0
 269 0014 3800     		movs	r0, r7
 270 0016 FFF7FEFF 		bl	memset
 271              	.LVL12:
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 272              		.loc 1 411 3 is_stmt 1 view .LVU79
 273              	.LBB84:
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 274              		.loc 1 411 3 view .LVU80
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 275              		.loc 1 411 3 view .LVU81
 276              	.LBE84:
 277              	.LBB85:
 412:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 278              		.loc 1 412 3 is_stmt 0 view .LVU82
ARM GAS  /tmp/cc5dAlVC.s 			page 15


 279 001a 0221     		movs	r1, #2
 280              	.LBE85:
 416:Src/main.c    **** 
 281              		.loc 1 416 3 view .LVU83
 282 001c 8024     		movs	r4, #128
 283              	.LBB86:
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 284              		.loc 1 411 3 view .LVU84
 285 001e 884E     		ldr	r6, .L8
 286              	.LBE86:
 416:Src/main.c    **** 
 287              		.loc 1 416 3 view .LVU85
 288 0020 A401     		lsls	r4, r4, #6
 289              	.LBB87:
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 290              		.loc 1 411 3 view .LVU86
 291 0022 736B     		ldr	r3, [r6, #52]
 292              	.LBE87:
 416:Src/main.c    **** 
 293              		.loc 1 416 3 view .LVU87
 294 0024 8748     		ldr	r0, .L8+4
 295              	.LBB88:
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 296              		.loc 1 411 3 view .LVU88
 297 0026 2B43     		orrs	r3, r5
 298 0028 7363     		str	r3, [r6, #52]
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 299              		.loc 1 411 3 is_stmt 1 view .LVU89
 300 002a 736B     		ldr	r3, [r6, #52]
 301 002c 2B40     		ands	r3, r5
 302 002e 0193     		str	r3, [sp, #4]
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 303              		.loc 1 411 3 view .LVU90
 304 0030 019B     		ldr	r3, [sp, #4]
 305              	.LBE88:
 411:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 306              		.loc 1 411 3 view .LVU91
 412:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 307              		.loc 1 412 3 view .LVU92
 308              	.LBB89:
 412:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 309              		.loc 1 412 3 view .LVU93
 412:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 310              		.loc 1 412 3 view .LVU94
 311 0032 726B     		ldr	r2, [r6, #52]
 312 0034 0A43     		orrs	r2, r1
 313 0036 7263     		str	r2, [r6, #52]
 412:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 314              		.loc 1 412 3 view .LVU95
 315 0038 736B     		ldr	r3, [r6, #52]
 316 003a 0B40     		ands	r3, r1
 317 003c 0293     		str	r3, [sp, #8]
 412:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 318              		.loc 1 412 3 view .LVU96
 319 003e 029B     		ldr	r3, [sp, #8]
 320              	.LBE89:
 412:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
ARM GAS  /tmp/cc5dAlVC.s 			page 16


 321              		.loc 1 412 3 view .LVU97
 413:Src/main.c    **** 
 322              		.loc 1 413 3 view .LVU98
 323              	.LBB90:
 413:Src/main.c    **** 
 324              		.loc 1 413 3 view .LVU99
 413:Src/main.c    **** 
 325              		.loc 1 413 3 view .LVU100
 326 0040 726B     		ldr	r2, [r6, #52]
 327 0042 0631     		adds	r1, r1, #6
 328 0044 0A43     		orrs	r2, r1
 329 0046 7263     		str	r2, [r6, #52]
 413:Src/main.c    **** 
 330              		.loc 1 413 3 view .LVU101
 331 0048 736B     		ldr	r3, [r6, #52]
 332              	.LBE90:
 416:Src/main.c    **** 
 333              		.loc 1 416 3 is_stmt 0 view .LVU102
 334 004a 0022     		movs	r2, #0
 335              	.LBB91:
 413:Src/main.c    **** 
 336              		.loc 1 413 3 view .LVU103
 337 004c 0B40     		ands	r3, r1
 338 004e 0393     		str	r3, [sp, #12]
 413:Src/main.c    **** 
 339              		.loc 1 413 3 is_stmt 1 view .LVU104
 340              	.LBE91:
 416:Src/main.c    **** 
 341              		.loc 1 416 3 is_stmt 0 view .LVU105
 342 0050 2100     		movs	r1, r4
 343              	.LBB92:
 413:Src/main.c    **** 
 344              		.loc 1 413 3 view .LVU106
 345 0052 039B     		ldr	r3, [sp, #12]
 346              	.LBE92:
 413:Src/main.c    **** 
 347              		.loc 1 413 3 is_stmt 1 view .LVU107
 416:Src/main.c    **** 
 348              		.loc 1 416 3 view .LVU108
 349 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 350              	.LVL13:
 419:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 351              		.loc 1 419 3 view .LVU109
 419:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 352              		.loc 1 419 23 is_stmt 0 view .LVU110
 353 0058 0594     		str	r4, [sp, #20]
 420:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 354              		.loc 1 420 3 is_stmt 1 view .LVU111
 421:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 355              		.loc 1 421 24 is_stmt 0 view .LVU112
 356 005a 0024     		movs	r4, #0
 423:Src/main.c    **** 
 357              		.loc 1 423 3 view .LVU113
 358 005c 3900     		movs	r1, r7
 359 005e 7948     		ldr	r0, .L8+4
 420:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 360              		.loc 1 420 24 view .LVU114
ARM GAS  /tmp/cc5dAlVC.s 			page 17


 361 0060 7D60     		str	r5, [r7, #4]
 421:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 362              		.loc 1 421 3 is_stmt 1 view .LVU115
 421:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 363              		.loc 1 421 24 is_stmt 0 view .LVU116
 364 0062 BC60     		str	r4, [r7, #8]
 422:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 365              		.loc 1 422 3 is_stmt 1 view .LVU117
 422:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 366              		.loc 1 422 25 is_stmt 0 view .LVU118
 367 0064 FC60     		str	r4, [r7, #12]
 423:Src/main.c    **** 
 368              		.loc 1 423 3 is_stmt 1 view .LVU119
 369 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 370              	.LVL14:
 371              	.LBE94:
 372              	.LBE96:
 104:Src/main.c    ****   MX_ADC1_Init();
 373              		.loc 1 104 3 view .LVU120
 374              	.LBB97:
 375              	.LBI97:
 382:Src/main.c    **** {
 376              		.loc 1 382 13 view .LVU121
 377              	.LBB98:
 386:Src/main.c    **** 
 378              		.loc 1 386 3 view .LVU122
 379              	.LBB99:
 386:Src/main.c    **** 
 380              		.loc 1 386 3 view .LVU123
 386:Src/main.c    **** 
 381              		.loc 1 386 3 view .LVU124
 382 006a B36B     		ldr	r3, [r6, #56]
 383              	.LBE99:
 390:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 384              		.loc 1 390 3 is_stmt 0 view .LVU125
 385 006c 2200     		movs	r2, r4
 386              	.LBB100:
 386:Src/main.c    **** 
 387              		.loc 1 386 3 view .LVU126
 388 006e 2B43     		orrs	r3, r5
 389 0070 B363     		str	r3, [r6, #56]
 386:Src/main.c    **** 
 390              		.loc 1 386 3 is_stmt 1 view .LVU127
 391 0072 B36B     		ldr	r3, [r6, #56]
 392              	.LBE100:
 390:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 393              		.loc 1 390 3 is_stmt 0 view .LVU128
 394 0074 0321     		movs	r1, #3
 395              	.LBB101:
 386:Src/main.c    **** 
 396              		.loc 1 386 3 view .LVU129
 397 0076 2B40     		ands	r3, r5
 398              	.LBE101:
 390:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 399              		.loc 1 390 3 view .LVU130
 400 0078 0920     		movs	r0, #9
 401              	.LBB102:
ARM GAS  /tmp/cc5dAlVC.s 			page 18


 386:Src/main.c    **** 
 402              		.loc 1 386 3 view .LVU131
 403 007a 0093     		str	r3, [sp]
 386:Src/main.c    **** 
 404              		.loc 1 386 3 is_stmt 1 view .LVU132
 405 007c 009B     		ldr	r3, [sp]
 406              	.LBE102:
 386:Src/main.c    **** 
 407              		.loc 1 386 3 view .LVU133
 390:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 408              		.loc 1 390 3 view .LVU134
 409 007e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 410              	.LVL15:
 391:Src/main.c    ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 411              		.loc 1 391 3 view .LVU135
 412 0082 0920     		movs	r0, #9
 413 0084 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 414              	.LVL16:
 393:Src/main.c    ****   NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 415              		.loc 1 393 3 view .LVU136
 416              	.LBB103:
 417              	.LBI103:
 418              		.file 2 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.6
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /*
   8:Drivers/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  10:Drivers/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  12:Drivers/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  16:Drivers/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  18:Drivers/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  24:Drivers/CMSIS/Include/core_cm0plus.h **** 
  25:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0plus.h **** 
  31:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
  34:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
ARM GAS  /tmp/cc5dAlVC.s 			page 19


  35:Drivers/CMSIS/Include/core_cm0plus.h **** 
  36:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0plus.h **** 
  40:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  41:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0plus.h **** 
  47:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h **** 
  55:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  59:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  62:Drivers/CMSIS/Include/core_cm0plus.h **** 
  63:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0plus.h ****  
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:Drivers/CMSIS/Include/core_cm0plus.h **** 
  71:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0plus.h **** */
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0plus.h **** 
  78:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0plus.h **** 
  83:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0plus.h **** 
  88:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
ARM GAS  /tmp/cc5dAlVC.s 			page 20


  92:Drivers/CMSIS/Include/core_cm0plus.h **** 
  93:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0plus.h **** 
  98:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0plus.h **** 
 103:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0plus.h **** 
 108:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0plus.h **** 
 113:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0plus.h **** 
 115:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
 117:Drivers/CMSIS/Include/core_cm0plus.h **** 
 118:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0plus.h **** }
 120:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0plus.h **** 
 122:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0plus.h **** 
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0plus.h **** 
 129:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0plus.h **** 
 133:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0plus.h **** 
 140:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0plus.h **** 
 145:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
ARM GAS  /tmp/cc5dAlVC.s 			page 21


 149:Drivers/CMSIS/Include/core_cm0plus.h **** 
 150:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm0plus.h **** 
 155:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 163:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:Drivers/CMSIS/Include/core_cm0plus.h **** 
 165:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:Drivers/CMSIS/Include/core_cm0plus.h **** */
 169:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 172:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 174:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:Drivers/CMSIS/Include/core_cm0plus.h **** 
 182:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:Drivers/CMSIS/Include/core_cm0plus.h **** 
 184:Drivers/CMSIS/Include/core_cm0plus.h **** 
 185:Drivers/CMSIS/Include/core_cm0plus.h **** 
 186:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:Drivers/CMSIS/Include/core_cm0plus.h **** */
 199:Drivers/CMSIS/Include/core_cm0plus.h **** 
 200:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 205:Drivers/CMSIS/Include/core_cm0plus.h ****  */
ARM GAS  /tmp/cc5dAlVC.s 			page 22


 206:Drivers/CMSIS/Include/core_cm0plus.h **** 
 207:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 208:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 211:Drivers/CMSIS/Include/core_cm0plus.h **** {
 212:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 213:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:Drivers/CMSIS/Include/core_cm0plus.h **** 
 223:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm0plus.h **** 
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm0plus.h **** 
 236:Drivers/CMSIS/Include/core_cm0plus.h **** 
 237:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 240:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm0plus.h **** {
 242:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 243:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 244:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm0plus.h **** 
 250:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm0plus.h **** 
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
ARM GAS  /tmp/cc5dAlVC.s 			page 23


 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:Drivers/CMSIS/Include/core_cm0plus.h **** 
 274:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm0plus.h **** 
 287:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm0plus.h **** 
 290:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm0plus.h **** 
 293:Drivers/CMSIS/Include/core_cm0plus.h **** 
 294:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 297:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 298:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 300:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 301:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:Drivers/CMSIS/Include/core_cm0plus.h **** 
 308:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:Drivers/CMSIS/Include/core_cm0plus.h **** 
 312:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:Drivers/CMSIS/Include/core_cm0plus.h **** 
 315:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:Drivers/CMSIS/Include/core_cm0plus.h **** 
 317:Drivers/CMSIS/Include/core_cm0plus.h **** 
 318:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 319:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
ARM GAS  /tmp/cc5dAlVC.s 			page 24


 320:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 323:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 324:Drivers/CMSIS/Include/core_cm0plus.h **** 
 325:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 326:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 328:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:Drivers/CMSIS/Include/core_cm0plus.h **** {
 330:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RSERVED1[31U];
 334:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:Drivers/CMSIS/Include/core_cm0plus.h **** 
 344:Drivers/CMSIS/Include/core_cm0plus.h **** 
 345:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 346:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 350:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 351:Drivers/CMSIS/Include/core_cm0plus.h **** 
 352:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 355:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:Drivers/CMSIS/Include/core_cm0plus.h **** {
 357:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 362:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 364:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:Drivers/CMSIS/Include/core_cm0plus.h **** 
 372:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0plus.h **** 
 376:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
ARM GAS  /tmp/cc5dAlVC.s 			page 25


 377:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0plus.h **** 
 379:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0plus.h **** 
 382:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0plus.h **** 
 385:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0plus.h **** 
 388:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0plus.h **** 
 395:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0plus.h **** 
 398:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** 
 401:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0plus.h **** 
 404:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0plus.h **** 
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0plus.h **** 
 410:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0plus.h **** 
 413:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:Drivers/CMSIS/Include/core_cm0plus.h **** 
 416:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 421:Drivers/CMSIS/Include/core_cm0plus.h **** 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:Drivers/CMSIS/Include/core_cm0plus.h **** 
 432:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
ARM GAS  /tmp/cc5dAlVC.s 			page 26


 434:Drivers/CMSIS/Include/core_cm0plus.h **** 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:Drivers/CMSIS/Include/core_cm0plus.h **** 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** 
 445:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** 
 459:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 463:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 467:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 468:Drivers/CMSIS/Include/core_cm0plus.h **** 
 469:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 470:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 472:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0plus.h **** 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0plus.h **** 
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
ARM GAS  /tmp/cc5dAlVC.s 			page 27


 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:Drivers/CMSIS/Include/core_cm0plus.h **** 
 497:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:Drivers/CMSIS/Include/core_cm0plus.h **** 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:Drivers/CMSIS/Include/core_cm0plus.h **** 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0plus.h **** 
 508:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0plus.h **** 
 511:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:Drivers/CMSIS/Include/core_cm0plus.h **** 
 513:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 515:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** 
 521:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 522:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 524:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:Drivers/CMSIS/Include/core_cm0plus.h **** {
 526:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:Drivers/CMSIS/Include/core_cm0plus.h **** 
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** 
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** 
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
ARM GAS  /tmp/cc5dAlVC.s 			page 28


 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:Drivers/CMSIS/Include/core_cm0plus.h **** 
 552:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:Drivers/CMSIS/Include/core_cm0plus.h **** 
 555:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
 559:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:Drivers/CMSIS/Include/core_cm0plus.h **** 
 563:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:Drivers/CMSIS/Include/core_cm0plus.h **** 
 566:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:Drivers/CMSIS/Include/core_cm0plus.h **** 
 573:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:Drivers/CMSIS/Include/core_cm0plus.h **** 
 576:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:Drivers/CMSIS/Include/core_cm0plus.h **** 
 579:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** 
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
 591:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 602:Drivers/CMSIS/Include/core_cm0plus.h **** 
 603:Drivers/CMSIS/Include/core_cm0plus.h **** 
 604:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  /tmp/cc5dAlVC.s 			page 29


 605:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 610:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 611:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:Drivers/CMSIS/Include/core_cm0plus.h **** 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 615:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 619:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 620:Drivers/CMSIS/Include/core_cm0plus.h **** 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 622:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:Drivers/CMSIS/Include/core_cm0plus.h **** */
 627:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:Drivers/CMSIS/Include/core_cm0plus.h **** 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 630:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:Drivers/CMSIS/Include/core_cm0plus.h **** */
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:Drivers/CMSIS/Include/core_cm0plus.h **** 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 641:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 645:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 646:Drivers/CMSIS/Include/core_cm0plus.h **** 
 647:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:Drivers/CMSIS/Include/core_cm0plus.h **** 
 653:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:Drivers/CMSIS/Include/core_cm0plus.h **** 
 657:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 661:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cc5dAlVC.s 			page 30


 662:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:Drivers/CMSIS/Include/core_cm0plus.h **** 
 664:Drivers/CMSIS/Include/core_cm0plus.h **** 
 665:Drivers/CMSIS/Include/core_cm0plus.h **** 
 666:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 674:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:Drivers/CMSIS/Include/core_cm0plus.h **** */
 676:Drivers/CMSIS/Include/core_cm0plus.h **** 
 677:Drivers/CMSIS/Include/core_cm0plus.h **** 
 678:Drivers/CMSIS/Include/core_cm0plus.h **** 
 679:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 681:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 685:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 686:Drivers/CMSIS/Include/core_cm0plus.h **** 
 687:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 691:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 693:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:Drivers/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:Drivers/CMSIS/Include/core_cm0plus.h **** 
 707:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 711:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 713:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:Drivers/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:Drivers/CMSIS/Include/core_cm0plus.h **** 
 717:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cc5dAlVC.s 			page 31


 719:Drivers/CMSIS/Include/core_cm0plus.h **** 
 720:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** 
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:Drivers/CMSIS/Include/core_cm0plus.h **** 
 732:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:Drivers/CMSIS/Include/core_cm0plus.h **** 
 735:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 736:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 741:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:Drivers/CMSIS/Include/core_cm0plus.h **** {
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 746:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 747:Drivers/CMSIS/Include/core_cm0plus.h **** }
 748:Drivers/CMSIS/Include/core_cm0plus.h **** 
 749:Drivers/CMSIS/Include/core_cm0plus.h **** 
 750:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 751:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 752:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 756:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 757:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 758:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 759:Drivers/CMSIS/Include/core_cm0plus.h **** {
 760:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 761:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 762:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 764:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 766:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 768:Drivers/CMSIS/Include/core_cm0plus.h **** }
 769:Drivers/CMSIS/Include/core_cm0plus.h **** 
 770:Drivers/CMSIS/Include/core_cm0plus.h **** 
 771:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 772:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 773:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 774:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 775:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
ARM GAS  /tmp/cc5dAlVC.s 			page 32


 776:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 777:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 778:Drivers/CMSIS/Include/core_cm0plus.h **** {
 779:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 780:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 781:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 782:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 784:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 785:Drivers/CMSIS/Include/core_cm0plus.h **** }
 786:Drivers/CMSIS/Include/core_cm0plus.h **** 
 787:Drivers/CMSIS/Include/core_cm0plus.h **** 
 788:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 789:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 790:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 791:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 792:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 794:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 795:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 796:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 797:Drivers/CMSIS/Include/core_cm0plus.h **** {
 798:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 799:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 800:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 801:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 803:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 804:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 805:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 806:Drivers/CMSIS/Include/core_cm0plus.h **** }
 807:Drivers/CMSIS/Include/core_cm0plus.h **** 
 808:Drivers/CMSIS/Include/core_cm0plus.h **** 
 809:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 810:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 811:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 813:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 814:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 815:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 816:Drivers/CMSIS/Include/core_cm0plus.h **** {
 817:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 818:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 819:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 820:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 821:Drivers/CMSIS/Include/core_cm0plus.h **** }
 822:Drivers/CMSIS/Include/core_cm0plus.h **** 
 823:Drivers/CMSIS/Include/core_cm0plus.h **** 
 824:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 825:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 826:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 827:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 828:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 829:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 830:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 831:Drivers/CMSIS/Include/core_cm0plus.h **** {
 832:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/cc5dAlVC.s 			page 33


 833:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 834:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 835:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 836:Drivers/CMSIS/Include/core_cm0plus.h **** }
 837:Drivers/CMSIS/Include/core_cm0plus.h **** 
 838:Drivers/CMSIS/Include/core_cm0plus.h **** 
 839:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 840:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 841:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 842:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 843:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 844:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 845:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 846:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 847:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 848:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 419              		.loc 2 848 22 view .LVU137
 420              	.LBB104:
 849:Drivers/CMSIS/Include/core_cm0plus.h **** {
 850:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 421              		.loc 2 850 3 view .LVU138
 851:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 852:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 422              		.loc 2 852 5 view .LVU139
 423              		.loc 2 852 52 is_stmt 0 view .LVU140
 424 0088 C220     		movs	r0, #194
 425 008a 6F49     		ldr	r1, .L8+8
 426 008c 8000     		lsls	r0, r0, #2
 427 008e 0B58     		ldr	r3, [r1, r0]
 428              		.loc 2 852 33 view .LVU141
 429 0090 6E4A     		ldr	r2, .L8+12
 430 0092 1A40     		ands	r2, r3
 431              		.loc 2 852 102 view .LVU142
 432 0094 C023     		movs	r3, #192
 433 0096 1B04     		lsls	r3, r3, #16
 434 0098 1343     		orrs	r3, r2
 435              		.loc 2 852 30 view .LVU143
 436 009a 0B50     		str	r3, [r1, r0]
 437              	.LVL17:
 438              		.loc 2 852 30 view .LVU144
 439              	.LBE104:
 440              	.LBE103:
 394:Src/main.c    ****   /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
 441              		.loc 1 394 3 is_stmt 1 view .LVU145
 442              	.LBB105:
 443              	.LBI105:
 741:Drivers/CMSIS/Include/core_cm0plus.h **** {
 444              		.loc 2 741 22 view .LVU146
 445              	.LBB106:
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 446              		.loc 2 743 3 view .LVU147
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 447              		.loc 2 745 5 view .LVU148
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 448              		.loc 2 745 20 is_stmt 0 view .LVU149
 449 009c 8023     		movs	r3, #128
 450 009e DB00     		lsls	r3, r3, #3
ARM GAS  /tmp/cc5dAlVC.s 			page 34


 451 00a0 0B60     		str	r3, [r1]
 452              	.LVL18:
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 453              		.loc 2 745 20 view .LVU150
 454              	.LBE106:
 455              	.LBE105:
 396:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 456              		.loc 1 396 3 is_stmt 1 view .LVU151
 457 00a2 2200     		movs	r2, r4
 458 00a4 0321     		movs	r1, #3
 459 00a6 0B20     		movs	r0, #11
 460 00a8 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 461              	.LVL19:
 397:Src/main.c    **** 
 462              		.loc 1 397 3 view .LVU152
 463 00ac 0B20     		movs	r0, #11
 464 00ae FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 465              	.LVL20:
 466              	.LBE98:
 467              	.LBE97:
 105:Src/main.c    ****   MX_UCPD2_Init();
 468              		.loc 1 105 3 view .LVU153
 469              	.LBB107:
 470              	.LBI107:
 215:Src/main.c    **** {
 471              		.loc 1 215 13 view .LVU154
 472              	.LBB108:
 222:Src/main.c    **** 
 473              		.loc 1 222 3 view .LVU155
 222:Src/main.c    **** 
 474              		.loc 1 222 26 is_stmt 0 view .LVU156
 475 00b2 0C22     		movs	r2, #12
 476 00b4 2100     		movs	r1, r4
 477 00b6 3800     		movs	r0, r7
 478 00b8 FFF7FEFF 		bl	memset
 479              	.LVL21:
 229:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 480              		.loc 1 229 3 is_stmt 1 view .LVU157
 230:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 481              		.loc 1 230 3 view .LVU158
 231:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 482              		.loc 1 231 3 view .LVU159
 232:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 483              		.loc 1 232 3 view .LVU160
 233:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 484              		.loc 1 233 3 view .LVU161
 234:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 485              		.loc 1 234 3 view .LVU162
 235:Src/main.c    ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 486              		.loc 1 235 3 view .LVU163
 236:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 487              		.loc 1 236 3 view .LVU164
 237:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 488              		.loc 1 237 3 view .LVU165
 229:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 489              		.loc 1 229 18 is_stmt 0 view .LVU166
 490 00bc 644D     		ldr	r5, .L8+16
ARM GAS  /tmp/cc5dAlVC.s 			page 35


 491 00be 654B     		ldr	r3, .L8+20
 248:Src/main.c    ****   {
 492              		.loc 1 248 7 view .LVU167
 493 00c0 2800     		movs	r0, r5
 229:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 494              		.loc 1 229 18 view .LVU168
 495 00c2 2B60     		str	r3, [r5]
 230:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 496              		.loc 1 230 29 view .LVU169
 497 00c4 8023     		movs	r3, #128
 498 00c6 1B06     		lsls	r3, r3, #24
 499 00c8 6B60     		str	r3, [r5, #4]
 234:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 500              		.loc 1 234 27 view .LVU170
 501 00ca 0423     		movs	r3, #4
 502 00cc 6B61     		str	r3, [r5, #20]
 237:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 503              		.loc 1 237 33 view .LVU171
 504 00ce 033B     		subs	r3, r3, #3
 505 00d0 AB76     		strb	r3, [r5, #26]
 238:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 506              		.loc 1 238 3 is_stmt 1 view .LVU172
 238:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 507              		.loc 1 238 30 is_stmt 0 view .LVU173
 508 00d2 EB61     		str	r3, [r5, #28]
 239:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 509              		.loc 1 239 3 is_stmt 1 view .LVU174
 239:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 510              		.loc 1 239 36 is_stmt 0 view .LVU175
 511 00d4 EB18     		adds	r3, r5, r3
 512 00d6 DC77     		strb	r4, [r3, #31]
 240:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 513              		.loc 1 240 3 is_stmt 1 view .LVU176
 242:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 514              		.loc 1 242 36 is_stmt 0 view .LVU177
 515 00d8 2B00     		movs	r3, r5
 516 00da 2C33     		adds	r3, r3, #44
 517 00dc 1C70     		strb	r4, [r3]
 244:Src/main.c    ****   hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 518              		.loc 1 244 34 view .LVU178
 519 00de 0723     		movs	r3, #7
 520 00e0 6B63     		str	r3, [r5, #52]
 245:Src/main.c    ****   hadc1.Init.OversamplingMode = DISABLE;
 521              		.loc 1 245 34 view .LVU179
 522 00e2 AB63     		str	r3, [r5, #56]
 246:Src/main.c    ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 523              		.loc 1 246 31 view .LVU180
 524 00e4 2B00     		movs	r3, r5
 235:Src/main.c    ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 525              		.loc 1 235 31 view .LVU181
 526 00e6 2C83     		strh	r4, [r5, #24]
 246:Src/main.c    ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 527              		.loc 1 246 31 view .LVU182
 528 00e8 3C33     		adds	r3, r3, #60
 231:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 529              		.loc 1 231 25 view .LVU183
 530 00ea AC60     		str	r4, [r5, #8]
ARM GAS  /tmp/cc5dAlVC.s 			page 36


 232:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 531              		.loc 1 232 24 view .LVU184
 532 00ec EC60     		str	r4, [r5, #12]
 233:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 533              		.loc 1 233 27 view .LVU185
 534 00ee 2C61     		str	r4, [r5, #16]
 240:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 535              		.loc 1 240 31 view .LVU186
 536 00f0 6C62     		str	r4, [r5, #36]
 241:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 537              		.loc 1 241 3 is_stmt 1 view .LVU187
 241:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 538              		.loc 1 241 35 is_stmt 0 view .LVU188
 539 00f2 AC62     		str	r4, [r5, #40]
 242:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 540              		.loc 1 242 3 is_stmt 1 view .LVU189
 243:Src/main.c    ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 541              		.loc 1 243 3 view .LVU190
 243:Src/main.c    ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 542              		.loc 1 243 22 is_stmt 0 view .LVU191
 543 00f4 2C63     		str	r4, [r5, #48]
 244:Src/main.c    ****   hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 544              		.loc 1 244 3 is_stmt 1 view .LVU192
 245:Src/main.c    ****   hadc1.Init.OversamplingMode = DISABLE;
 545              		.loc 1 245 3 view .LVU193
 246:Src/main.c    ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 546              		.loc 1 246 3 view .LVU194
 246:Src/main.c    ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 547              		.loc 1 246 31 is_stmt 0 view .LVU195
 548 00f6 1C70     		strb	r4, [r3]
 247:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 549              		.loc 1 247 3 is_stmt 1 view .LVU196
 247:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 550              		.loc 1 247 35 is_stmt 0 view .LVU197
 551 00f8 EC64     		str	r4, [r5, #76]
 248:Src/main.c    ****   {
 552              		.loc 1 248 3 is_stmt 1 view .LVU198
 248:Src/main.c    ****   {
 553              		.loc 1 248 7 is_stmt 0 view .LVU199
 554 00fa FFF7FEFF 		bl	HAL_ADC_Init
 555              	.LVL22:
 254:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 556              		.loc 1 254 3 is_stmt 1 view .LVU200
 254:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 557              		.loc 1 254 19 is_stmt 0 view .LVU201
 558 00fe 564B     		ldr	r3, .L8+24
 257:Src/main.c    ****   {
 559              		.loc 1 257 7 view .LVU202
 560 0100 3900     		movs	r1, r7
 561 0102 2800     		movs	r0, r5
 254:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 562              		.loc 1 254 19 view .LVU203
 563 0104 0593     		str	r3, [sp, #20]
 255:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 564              		.loc 1 255 3 is_stmt 1 view .LVU204
 255:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 565              		.loc 1 255 16 is_stmt 0 view .LVU205
ARM GAS  /tmp/cc5dAlVC.s 			page 37


 566 0106 7C60     		str	r4, [r7, #4]
 256:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 567              		.loc 1 256 3 is_stmt 1 view .LVU206
 256:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 568              		.loc 1 256 24 is_stmt 0 view .LVU207
 569 0108 BC60     		str	r4, [r7, #8]
 257:Src/main.c    ****   {
 570              		.loc 1 257 3 is_stmt 1 view .LVU208
 257:Src/main.c    ****   {
 571              		.loc 1 257 7 is_stmt 0 view .LVU209
 572 010a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 573              	.LVL23:
 574              	.LBE108:
 575              	.LBE107:
 106:Src/main.c    ****   MX_USBPD_Init();
 576              		.loc 1 106 3 is_stmt 1 view .LVU210
 577              	.LBB109:
 578              	.LBI109:
 320:Src/main.c    **** {
 579              		.loc 1 320 13 view .LVU211
 580              	.LBE109:
 328:Src/main.c    **** 
 581              		.loc 1 328 3 view .LVU212
 582              	.LBB180:
 583              	.LBB110:
 584              	.LBI110:
 585              		.file 3 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h"
   1:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
   2:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   ******************************************************************************
   3:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @file    stm32g0xx_ll_bus.h
   4:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @author  MCD Application Team
   5:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @brief   Header file of BUS LL module.
   6:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
   7:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   @verbatim
   8:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****                       ##### RCC Limitations #####
   9:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   ==============================================================================
  10:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****     [..]
  11:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****       A delay between an RCC peripheral clock enable and the effective peripheral
  12:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****       enabling should be taken into account in order to manage the peripheral read/write
  13:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****       from/to registers.
  14:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****       (+) This delay depends on the peripheral mapping.
  15:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  16:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  17:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****     [..]
  18:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****       Workarounds:
  19:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  20:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****           inserted in each LL_{BUS}_GRP{x}_EnableClock() function.
  21:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  22:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   @endverbatim
  23:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   ******************************************************************************
  24:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @attention
  25:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *
  26:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics. 
  27:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * All rights reserved.</center></h2>
  28:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *
  29:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  30:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * the "License"; You may not use this file except in compliance with the 
ARM GAS  /tmp/cc5dAlVC.s 			page 38


  31:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * License. You may obtain a copy of the License at:
  32:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *                        opensource.org/licenses/BSD-3-Clause
  33:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *
  34:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   ******************************************************************************
  35:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
  36:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  37:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  38:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #ifndef STM32G0xx_LL_BUS_H
  39:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define STM32G0xx_LL_BUS_H
  40:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  41:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #ifdef __cplusplus
  42:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** extern "C" {
  43:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
  44:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  45:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Includes ------------------------------------------------------------------*/
  46:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #include "stm32g0xx.h"
  47:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  48:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @addtogroup STM32G0xx_LL_Driver
  49:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
  50:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
  51:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  52:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(RCC)
  53:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  54:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @defgroup BUS_LL BUS
  55:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
  56:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
  57:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  58:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Private types -------------------------------------------------------------*/
  59:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Private variables ---------------------------------------------------------*/
  60:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  61:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Private constants ---------------------------------------------------------*/
  62:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  63:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Private macros ------------------------------------------------------------*/
  64:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  65:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Exported types ------------------------------------------------------------*/
  66:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Exported constants --------------------------------------------------------*/
  67:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Constants BUS Exported Constants
  68:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
  69:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
  70:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  71:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_AHB1_GRP1_PERIPH  AHB1 GRP1 PERIPH
  72:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
  73:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
  74:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ALL            0xFFFFFFFFU
  75:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA1           RCC_AHBENR_DMA1EN
  76:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_FLASH          RCC_AHBENR_FLASHEN
  77:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_SRAM           RCC_AHBSMENR_SRAMSMEN
  78:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(CRC)
  79:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRC            RCC_AHBENR_CRCEN
  80:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
  81:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(AES)
  82:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRYP           RCC_AHBENR_AESEN
  83:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* AES */
  84:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(RNG)
  85:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_RNG            RCC_AHBENR_RNGEN
  86:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
  87:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
ARM GAS  /tmp/cc5dAlVC.s 			page 39


  88:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @}
  89:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
  90:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  91:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
  92:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB1_GRP1_PERIPH  APB1 GRP1 PERIPH
  93:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
  94:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
  95:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_ALL            0xFFFFFFFFU
  96:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(TIM2)
  97:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM2           RCC_APBENR1_TIM2EN
  98:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* TIM2 */
  99:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(TIM3)
 100:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM3           RCC_APBENR1_TIM3EN
 101:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* TIM3 */
 102:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(TIM6)
 103:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM6           RCC_APBENR1_TIM6EN
 104:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* TIM6 */
 105:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(TIM7)
 106:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM7           RCC_APBENR1_TIM7EN
 107:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* TIM7 */
 108:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_RTC            RCC_APBENR1_RTCAPBEN
 109:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_WWDG           RCC_APBENR1_WWDGEN
 110:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI2           RCC_APBENR1_SPI2EN
 111:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART2         RCC_APBENR1_USART2EN
 112:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(USART3)
 113:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART3         RCC_APBENR1_USART3EN
 114:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 115:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(USART4)
 116:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART4         RCC_APBENR1_USART4EN
 117:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* USART4 */
 118:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(LPUART1)
 119:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LPUART1        RCC_APBENR1_LPUART1EN
 120:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 121:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C1           RCC_APBENR1_I2C1EN
 122:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C2           RCC_APBENR1_I2C2EN
 123:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(CEC)
 124:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_CEC            RCC_APBENR1_CECEN
 125:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* CEC */
 126:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(UCPD1)
 127:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_UCPD1          RCC_APBENR1_UCPD1EN
 128:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 129:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(UCPD2)
 130:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_UCPD2          RCC_APBENR1_UCPD2EN
 131:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 132:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_DBGMCU         RCC_APBENR1_DBGEN
 133:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_PWR            RCC_APBENR1_PWREN
 134:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(DAC1)
 135:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_DAC1           RCC_APBENR1_DAC1EN
 136:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 137:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(LPTIM2)
 138:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LPTIM2         RCC_APBENR1_LPTIM2EN
 139:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 140:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(LPTIM1)
 141:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LPTIM1         RCC_APBENR1_LPTIM1EN
 142:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 143:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 144:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @}
ARM GAS  /tmp/cc5dAlVC.s 			page 40


 145:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 146:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 147:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB2_GRP1_PERIPH  APB2 GRP1 PERIPH
 148:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
 149:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 150:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ALL            0xFFFFFFFFU
 151:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SYSCFG         RCC_APBENR2_SYSCFGEN
 152:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM1           RCC_APBENR2_TIM1EN
 153:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SPI1           RCC_APBENR2_SPI1EN
 154:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_USART1         RCC_APBENR2_USART1EN
 155:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(TIM14)
 156:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM14          RCC_APBENR2_TIM14EN
 157:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* TIM14 */
 158:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(TIM15)
 159:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM15          RCC_APBENR2_TIM15EN
 160:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 161:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(TIM16)
 162:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM16          RCC_APBENR2_TIM16EN
 163:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 164:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(TIM17)
 165:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM17          RCC_APBENR2_TIM17EN
 166:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* TIM17 */
 167:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(ADC)
 168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ADC            RCC_APBENR2_ADCEN
 169:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif
 170:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 171:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @}
 172:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 173:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 174:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_IOP_GRP1_PERIPH  IOP GRP1 PERIPH
 175:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
 176:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 177:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_ALL             0xFFFFFFFFU
 178:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOA           RCC_IOPENR_GPIOAEN
 179:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOB           RCC_IOPENR_GPIOBEN
 180:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOC           RCC_IOPENR_GPIOCEN
 181:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOD           RCC_IOPENR_GPIODEN
 182:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(GPIOE)
 183:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOE           RCC_IOPENR_GPIOEEN
 184:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* GPIOE */
 185:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #if defined(GPIOF)
 186:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOF           RCC_IOPENR_GPIOFEN
 187:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** #endif /* GPIOF */
 188:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 189:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @}
 190:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 191:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 192:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 193:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @}
 194:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 195:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 196:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Exported macro ------------------------------------------------------------*/
 197:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /* Exported functions --------------------------------------------------------*/
 198:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Functions BUS Exported Functions
 199:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
 200:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 201:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
ARM GAS  /tmp/cc5dAlVC.s 			page 41


 202:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @defgroup BUS_LL_EF_AHB1 AHB1
 203:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
 204:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 205:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 206:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 207:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock.
 208:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @rmtoll AHBENR       DMA1EN        LL_AHB1_GRP1_EnableClock\n
 209:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       FLASHEN       LL_AHB1_GRP1_EnableClock\n
 210:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       CRCEN         LL_AHB1_GRP1_EnableClock\n
 211:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       AESEN         LL_AHB1_GRP1_EnableClock\n
 212:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       RNGEN         LL_AHB1_GRP1_EnableClock
 213:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 214:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 215:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 216:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 217:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
 219:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
 220:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @retval None
 221:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** */
 222:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
 223:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** {
 224:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 225:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   SET_BIT(RCC->AHBENR, Periphs);
 226:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 227:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 228:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   (void)tmpreg;
 229:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** }
 230:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 231:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 232:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @brief  Check if AHB1 peripheral clock is enabled or not
 233:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @rmtoll AHBENR       DMA1EN        LL_AHB1_GRP1_IsEnabledClock\n
 234:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       FLASHEN       LL_AHB1_GRP1_IsEnabledClock\n
 235:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       CRCEN         LL_AHB1_GRP1_IsEnabledClock\n
 236:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       AESEN         LL_AHB1_GRP1_IsEnabledClock\n
 237:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       RNGEN         LL_AHB1_GRP1_IsEnabledClock
 238:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 239:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 240:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 241:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 242:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 243:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
 244:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
 245:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 246:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** */
 247:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
 248:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** {
 249:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   return ((READ_BIT(RCC->AHBENR, Periphs) == Periphs) ? 1UL : 0UL);
 250:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** }
 251:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 252:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 253:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock.
 254:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @rmtoll AHBENR       DMA1EN        LL_AHB1_GRP1_DisableClock\n
 255:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       FLASHEN       LL_AHB1_GRP1_DisableClock\n
 256:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       CRCEN         LL_AHB1_GRP1_DisableClock\n
 257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       AESEN         LL_AHB1_GRP1_DisableClock\n
 258:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBENR       RNGEN         LL_AHB1_GRP1_DisableClock
ARM GAS  /tmp/cc5dAlVC.s 			page 42


 259:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 260:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 261:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 262:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 263:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 264:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
 265:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
 266:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @retval None
 267:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** */
 268:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClock(uint32_t Periphs)
 269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** {
 270:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBENR, Periphs);
 271:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** }
 272:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 273:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 274:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @brief  Force AHB1 peripherals reset.
 275:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @rmtoll AHBRSTR      DMA1RST       LL_AHB1_GRP1_ForceReset\n
 276:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBRSTR      FLASHRST      LL_AHB1_GRP1_ForceReset\n
 277:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBRSTR      CRCRST        LL_AHB1_GRP1_ForceReset\n
 278:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBRSTR      AESRST        LL_AHB1_GRP1_ForceReset\n
 279:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBRSTR      RNGRST        LL_AHB1_GRP1_ForceReset
 280:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** * @param  Periphs This parameter can be a combination of the following values:
 281:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 282:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 283:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 284:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 285:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 286:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
 287:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
 288:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @retval None
 289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** */
 290:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
 291:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** {
 292:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   SET_BIT(RCC->AHBRSTR, Periphs);
 293:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** }
 294:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 295:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 296:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @brief  Release AHB1 peripherals reset.
 297:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @rmtoll AHBRSTR      DMA1RST       LL_AHB1_GRP1_ReleaseReset\n
 298:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBRSTR      FLASHRST      LL_AHB1_GRP1_ReleaseReset\n
 299:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBRSTR      CRCRST        LL_AHB1_GRP1_ReleaseReset\n
 300:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBRSTR      AESRST        LL_AHB1_GRP1_ReleaseReset\n
 301:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBRSTR      RNGRST        LL_AHB1_GRP1_ReleaseReset
 302:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 304:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 306:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 307:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 308:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
 309:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
 310:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @retval None
 311:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** */
 312:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
 313:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** {
 314:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBRSTR, Periphs);
 315:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** }
ARM GAS  /tmp/cc5dAlVC.s 			page 43


 316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 317:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 318:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @brief  Enable AHB1 peripheral clocks in Sleep and Stop modes
 319:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @rmtoll AHBSMENR     DMA1SMEN      LL_AHB1_GRP1_EnableClockStopSleep\n
 320:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     FLASHSMEN     LL_AHB1_GRP1_EnableClockStopSleep\n
 321:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     SRAMSMEN      LL_AHB1_GRP1_EnableClockStopSleep\n
 322:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     CRCSMEN       LL_AHB1_GRP1_EnableClockStopSleep\n
 323:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     AESSMEN       LL_AHB1_GRP1_EnableClockStopSleep\n
 324:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     RNGSMEN       LL_AHB1_GRP1_EnableClockStopSleep
 325:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 326:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 327:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 328:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 329:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 330:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 331:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
 332:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
 333:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @retval None
 334:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** */
 335:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClockStopSleep(uint32_t Periphs)
 336:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** {
 337:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 338:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   SET_BIT(RCC->AHBSMENR, Periphs);
 339:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 340:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBSMENR, Periphs);
 341:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   (void)tmpreg;
 342:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** }
 343:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 344:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 345:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @brief  Disable AHB1 peripheral clocks in Sleep and Stop modes
 346:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @rmtoll AHBSMENR     DMA1SMEN      LL_AHB1_GRP1_DisableClockStopSleep\n
 347:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     FLASHSMEN     LL_AHB1_GRP1_DisableClockStopSleep\n
 348:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     SRAMSMEN      LL_AHB1_GRP1_DisableClockStopSleep\n
 349:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     CRCSMEN       LL_AHB1_GRP1_DisableClockStopSleep\n
 350:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     AESSMEN       LL_AHB1_GRP1_DisableClockStopSleep\n
 351:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         AHBSMENR     RNGSMEN       LL_AHB1_GRP1_DisableClockStopSleep
 352:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 353:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 354:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 355:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 356:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 357:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 358:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
 359:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
 360:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @retval None
 361:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** */
 362:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClockStopSleep(uint32_t Periphs)
 363:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** {
 364:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBSMENR, Periphs);
 365:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** }
 366:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 367:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 368:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @}
 369:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 370:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 371:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB1 APB1
 372:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @{
ARM GAS  /tmp/cc5dAlVC.s 			page 44


 373:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   */
 374:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** 
 375:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** /**
 376:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock.
 377:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @rmtoll APBENR1      TIM2EN        LL_APB1_GRP1_EnableClock\n
 378:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      TIM3EN        LL_APB1_GRP1_EnableClock\n
 379:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      TIM6EN        LL_APB1_GRP1_EnableClock\n
 380:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      TIM7EN        LL_APB1_GRP1_EnableClock\n
 381:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      RTCAPBEN      LL_APB1_GRP1_EnableClock\n
 382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      WWDGEN        LL_APB1_GRP1_EnableClock\n
 383:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      SPI2EN        LL_APB1_GRP1_EnableClock\n
 384:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      USART2EN      LL_APB1_GRP1_EnableClock\n
 385:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      USART3EN      LL_APB1_GRP1_EnableClock\n
 386:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      USART4EN      LL_APB1_GRP1_EnableClock\n
 387:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      LPUART1EN     LL_APB1_GRP1_EnableClock\n
 388:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      I2C1EN        LL_APB1_GRP1_EnableClock\n
 389:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      I2C2EN        LL_APB1_GRP1_EnableClock\n
 390:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      CECEN         LL_APB1_GRP1_EnableClock\n
 391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      UCPD1EN       LL_APB1_GRP1_EnableClock\n
 392:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      UCPD2EN       LL_APB1_GRP1_EnableClock\n
 393:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      DBGEN         LL_APB1_GRP1_EnableClock\n
 394:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      PWREN         LL_APB1_GRP1_EnableClock\n
 395:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      DAC1EN        LL_APB1_GRP1_EnableClock\n
 396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      LPTIM2EN      LL_APB1_GRP1_EnableClock\n
 397:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         APBENR1      LPTIM1EN      LL_APB1_GRP1_EnableClock
 398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2    (1)
 400:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 401:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6    (1)
 402:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7    (1)
 403:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_RTC
 404:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 405:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2
 406:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 407:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3  (1)
 408:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART4  (1)
 409:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPUART1 (1)
 410:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 411:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2
 412:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CEC     (1)
 413:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UCPD1   (1)
 414:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UCPD2   (1)
 415:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DBGMCU
 416:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 417:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1    (1)
 418:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM2  (1)
 419:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
 420:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @note Peripheral marked with (1) are not available all devices
 421:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   * @retval None
 422:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** */
 423:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
 586              		.loc 3 423 22 view .LVU213
 587              	.LBB111:
 424:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h **** {
 425:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 588              		.loc 3 425 3 view .LVU214
 426:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   SET_BIT(RCC->APBENR1, Periphs);
ARM GAS  /tmp/cc5dAlVC.s 			page 45


 589              		.loc 3 426 3 view .LVU215
 590 010e 8021     		movs	r1, #128
 591 0110 F26B     		ldr	r2, [r6, #60]
 592 0112 C904     		lsls	r1, r1, #19
 593 0114 0A43     		orrs	r2, r1
 594 0116 F263     		str	r2, [r6, #60]
 427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 428:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 595              		.loc 3 428 3 view .LVU216
 596              		.loc 3 428 12 is_stmt 0 view .LVU217
 597 0118 F36B     		ldr	r3, [r6, #60]
 598              	.LBE111:
 599              	.LBE110:
 600              	.LBB113:
 601              	.LBB114:
 602              		.file 4 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
   1:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
   2:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   ******************************************************************************
   3:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @file    stm32g0xx_ll_dma.h
   4:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @author  MCD Application Team
   5:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief   Header file of DMA LL module.
   6:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   ******************************************************************************
   7:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @attention
   8:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *
   9:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics. 
  10:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *
  12:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * the "License"; You may not use this file except in compliance with the 
  14:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *
  17:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   ******************************************************************************
  18:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
  19:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  20:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #ifndef STM32G0xx_LL_DMA_H
  22:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define STM32G0xx_LL_DMA_H
  23:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  24:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #ifdef __cplusplus
  25:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** extern "C" {
  26:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
  27:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  28:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #include "stm32g0xx.h"
  30:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #include "stm32g0xx_ll_dmamux.h"
  31:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  32:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @addtogroup STM32G0xx_LL_Driver
  33:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
  34:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
  35:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  36:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined (DMA1)
  37:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  38:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL DMA
  39:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
  40:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
  41:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
ARM GAS  /tmp/cc5dAlVC.s 			page 46


  42:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Private types -------------------------------------------------------------*/
  43:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Private variables ---------------------------------------------------------*/
  44:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Variables DMA Private Variables
  45:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
  46:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
  47:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Array used to get the DMA channel register offset versus channel index LL_DMA_CHANNEL_x */
  48:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** static const uint8_t CHANNEL_OFFSET_TAB[] =
  49:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
  50:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel1_BASE - DMA1_BASE),
  51:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel2_BASE - DMA1_BASE),
  52:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel3_BASE - DMA1_BASE),
  53:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel4_BASE - DMA1_BASE),
  54:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel5_BASE - DMA1_BASE),
  55:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel6_BASE)
  56:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel6_BASE - DMA1_BASE),
  57:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
  58:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel7_BASE)
  59:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   (uint8_t)(DMA1_Channel7_BASE - DMA1_BASE)
  60:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
  61:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** };
  62:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
  63:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
  64:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
  65:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  66:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Private constants ---------------------------------------------------------*/
  67:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Private macros ------------------------------------------------------------*/
  68:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Macros DMA Private Macros
  69:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
  70:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
  71:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
  72:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
  73:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
  74:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  75:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Exported types ------------------------------------------------------------*/
  76:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  77:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_ES_INIT DMA Exported Init structure
  78:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
  79:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
  80:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** typedef struct
  81:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
  82:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcAddress;  /*!< Specifies the peripheral base address for DMA transfer
  83:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         or as Source base address in case of memory to memory trans
  84:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  85:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
  86:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  87:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t MemoryOrM2MDstAddress;  /*!< Specifies the memory base address for DMA transfer
  88:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         or as Destination base address in case of memory to memory 
  89:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  90:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
  91:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  92:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t Direction;              /*!< Specifies if the data will be transferred from memory to pe
  93:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         from memory to memory or from peripheral to memory.
  94:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_DIRECTION
  95:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  96:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
  97:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
  98:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t Mode;                   /*!< Specifies the normal or circular operation mode.
ARM GAS  /tmp/cc5dAlVC.s 			page 47


  99:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MODE
 100:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         @note: The circular buffer mode cannot be used if the memor
 101:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                                data transfer direction is configured on the selecte
 102:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 103:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 104:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 105:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcIncMode;  /*!< Specifies whether the Peripheral address or Source address 
 106:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         is incremented or not.
 107:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PERIPH
 108:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 109:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 110:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 111:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t MemoryOrM2MDstIncMode;  /*!< Specifies whether the Memory address or Destination address
 112:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         is incremented or not.
 113:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MEMORY
 114:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 115:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 116:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 117:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcDataSize; /*!< Specifies the Peripheral data size alignment or Source data
 118:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 119:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PDATAALIGN
 120:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 121:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 122:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 123:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t MemoryOrM2MDstDataSize; /*!< Specifies the Memory data size alignment or Destination dat
 124:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 125:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MDATAALIGN
 126:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 127:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 128:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 129:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t NbData;                 /*!< Specifies the number of data to transfer, in data unit.
 130:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         The data unit is equal to the source buffer configuration s
 131:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         or MemorySize parameters depending in the transfer directio
 132:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 133:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 134:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 135:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 136:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t PeriphRequest;          /*!< Specifies the peripheral request.
 137:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMAMUX_LL_EC_REQUEST
 138:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 139:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 140:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 141:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t Priority;               /*!< Specifies the channel priority level.
 142:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PRIORITY
 143:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 144:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 145:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 146:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** } LL_DMA_InitTypeDef;
 147:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 148:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 149:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 150:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 151:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 152:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Exported constants --------------------------------------------------------*/
 153:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Constants DMA Exported Constants
 154:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 155:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
ARM GAS  /tmp/cc5dAlVC.s 			page 48


 156:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CLEAR_FLAG Clear Flags Defines
 157:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_WriteReg function
 158:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 159:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 160:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF1                 DMA_IFCR_CGIF1        /*!< Channel 1 global flag         
 161:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF1                DMA_IFCR_CTCIF1       /*!< Channel 1 transfer complete fl
 162:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF1                DMA_IFCR_CHTIF1       /*!< Channel 1 half transfer flag  
 163:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF1                DMA_IFCR_CTEIF1       /*!< Channel 1 transfer error flag 
 164:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF2                 DMA_IFCR_CGIF2        /*!< Channel 2 global flag         
 165:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF2                DMA_IFCR_CTCIF2       /*!< Channel 2 transfer complete fl
 166:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF2                DMA_IFCR_CHTIF2       /*!< Channel 2 half transfer flag  
 167:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF2                DMA_IFCR_CTEIF2       /*!< Channel 2 transfer error flag 
 168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF3                 DMA_IFCR_CGIF3        /*!< Channel 3 global flag         
 169:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF3                DMA_IFCR_CTCIF3       /*!< Channel 3 transfer complete fl
 170:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF3                DMA_IFCR_CHTIF3       /*!< Channel 3 half transfer flag  
 171:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF3                DMA_IFCR_CTEIF3       /*!< Channel 3 transfer error flag 
 172:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF4                 DMA_IFCR_CGIF4        /*!< Channel 4 global flag         
 173:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF4                DMA_IFCR_CTCIF4       /*!< Channel 4 transfer complete fl
 174:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF4                DMA_IFCR_CHTIF4       /*!< Channel 4 half transfer flag  
 175:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF4                DMA_IFCR_CTEIF4       /*!< Channel 4 transfer error flag 
 176:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF5                 DMA_IFCR_CGIF5        /*!< Channel 5 global flag         
 177:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF5                DMA_IFCR_CTCIF5       /*!< Channel 5 transfer complete fl
 178:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF5                DMA_IFCR_CHTIF5       /*!< Channel 5 half transfer flag  
 179:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF5                DMA_IFCR_CTEIF5       /*!< Channel 5 transfer error flag 
 180:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel6)
 181:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF6                 DMA_IFCR_CGIF6        /*!< Channel 6 global flag         
 182:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF6                DMA_IFCR_CTCIF6       /*!< Channel 6 transfer complete fl
 183:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF6                DMA_IFCR_CHTIF6       /*!< Channel 6 half transfer flag  
 184:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF6                DMA_IFCR_CTEIF6       /*!< Channel 6 transfer error flag 
 185:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
 186:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel7)
 187:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF7                 DMA_IFCR_CGIF7        /*!< Channel 7 global flag         
 188:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF7                DMA_IFCR_CTCIF7       /*!< Channel 7 transfer complete fl
 189:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF7                DMA_IFCR_CHTIF7       /*!< Channel 7 half transfer flag  
 190:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF7                DMA_IFCR_CTEIF7       /*!< Channel 7 transfer error flag 
 191:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
 192:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 193:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 194:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 195:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 196:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_GET_FLAG Get Flags Defines
 197:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_ReadReg function
 198:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 199:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 200:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_GIF1                   DMA_ISR_GIF1          /*!< Channel 1 global flag         
 201:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF1                  DMA_ISR_TCIF1         /*!< Channel 1 transfer complete fl
 202:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF1                  DMA_ISR_HTIF1         /*!< Channel 1 half transfer flag  
 203:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF1                  DMA_ISR_TEIF1         /*!< Channel 1 transfer error flag 
 204:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_GIF2                   DMA_ISR_GIF2          /*!< Channel 2 global flag         
 205:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF2                  DMA_ISR_TCIF2         /*!< Channel 2 transfer complete fl
 206:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF2                  DMA_ISR_HTIF2         /*!< Channel 2 half transfer flag  
 207:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF2                  DMA_ISR_TEIF2         /*!< Channel 2 transfer error flag 
 208:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_GIF3                   DMA_ISR_GIF3          /*!< Channel 3 global flag         
 209:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF3                  DMA_ISR_TCIF3         /*!< Channel 3 transfer complete fl
 210:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF3                  DMA_ISR_HTIF3         /*!< Channel 3 half transfer flag  
 211:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF3                  DMA_ISR_TEIF3         /*!< Channel 3 transfer error flag 
 212:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_GIF4                   DMA_ISR_GIF4          /*!< Channel 4 global flag         
ARM GAS  /tmp/cc5dAlVC.s 			page 49


 213:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF4                  DMA_ISR_TCIF4         /*!< Channel 4 transfer complete fl
 214:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF4                  DMA_ISR_HTIF4         /*!< Channel 4 half transfer flag  
 215:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF4                  DMA_ISR_TEIF4         /*!< Channel 4 transfer error flag 
 216:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_GIF5                   DMA_ISR_GIF5          /*!< Channel 5 global flag         
 217:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF5                  DMA_ISR_TCIF5         /*!< Channel 5 transfer complete fl
 218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF5                  DMA_ISR_HTIF5         /*!< Channel 5 half transfer flag  
 219:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF5                  DMA_ISR_TEIF5         /*!< Channel 5 transfer error flag 
 220:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel6)
 221:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_GIF6                   DMA_ISR_GIF6          /*!< Channel 6 global flag         
 222:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF6                  DMA_ISR_TCIF6         /*!< Channel 6 transfer complete fl
 223:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF6                  DMA_ISR_HTIF6         /*!< Channel 6 half transfer flag  
 224:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF6                  DMA_ISR_TEIF6         /*!< Channel 6 transfer error flag 
 225:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
 226:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel7)
 227:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_GIF7                   DMA_ISR_GIF7          /*!< Channel 7 global flag         
 228:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TCIF7                  DMA_ISR_TCIF7         /*!< Channel 7 transfer complete fl
 229:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_HTIF7                  DMA_ISR_HTIF7         /*!< Channel 7 half transfer flag  
 230:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ISR_TEIF7                  DMA_ISR_TEIF7         /*!< Channel 7 transfer error flag 
 231:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
 232:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 233:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 234:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 235:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 236:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_IT IT Defines
 237:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief    IT defines which can be used with LL_DMA_ReadReg and  LL_DMA_WriteReg functions
 238:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 239:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 240:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CCR_TCIE                   DMA_CCR_TCIE          /*!< Transfer complete interrupt */
 241:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CCR_HTIE                   DMA_CCR_HTIE          /*!< Half Transfer interrupt     */
 242:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CCR_TEIE                   DMA_CCR_TEIE          /*!< Transfer error interrupt    */
 243:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 244:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 245:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 246:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 247:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CHANNEL CHANNEL
 248:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 249:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 250:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CHANNEL_1                  0x00000001U /*!< DMA Channel 1 */
 251:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CHANNEL_2                  0x00000002U /*!< DMA Channel 2 */
 252:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CHANNEL_3                  0x00000003U /*!< DMA Channel 3 */
 253:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CHANNEL_4                  0x00000004U /*!< DMA Channel 4 */
 254:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CHANNEL_5                  0x00000005U /*!< DMA Channel 5 */
 255:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel6)
 256:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CHANNEL_6                  0x00000006U /*!< DMA Channel 6 */
 257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
 258:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel7)
 259:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CHANNEL_7                  0x00000007U /*!< DMA Channel 7 */
 260:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
 261:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
 262:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_CHANNEL_ALL                0xFFFF0000U /*!< DMA Channel all (used only for function 
 263:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 264:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 265:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 266:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 267:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 268:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DIRECTION Transfer Direction
 269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
ARM GAS  /tmp/cc5dAlVC.s 			page 50


 270:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 271:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U             /*!< Peripheral to memory directi
 272:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_CCR_DIR             /*!< Memory to peripheral directi
 273:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_CCR_MEM2MEM         /*!< Memory to memory direction  
 274:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 275:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 276:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 277:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 278:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MODE Transfer mode
 279:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 280:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 281:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_MODE_NORMAL                0x00000000U             /*!< Normal Mode                 
 282:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_MODE_CIRCULAR              DMA_CCR_CIRC            /*!< Circular Mode               
 283:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 284:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 285:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 286:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 287:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PERIPH Peripheral increment mode
 288:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 290:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_PERIPH_INCREMENT           DMA_CCR_PINC            /*!< Peripheral increment mode En
 291:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_PERIPH_NOINCREMENT         0x00000000U             /*!< Peripheral increment mode Di
 292:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 293:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 294:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 295:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 296:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MEMORY Memory increment mode
 297:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 298:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 299:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_MEMORY_INCREMENT           DMA_CCR_MINC            /*!< Memory increment mode Enable
 300:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_MEMORY_NOINCREMENT         0x00000000U             /*!< Memory increment mode Disabl
 301:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 302:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 304:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PDATAALIGN Peripheral data alignment
 306:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 307:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 308:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_BYTE            0x00000000U             /*!< Peripheral data alignment : 
 309:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_HALFWORD        DMA_CCR_PSIZE_0         /*!< Peripheral data alignment : 
 310:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_WORD            DMA_CCR_PSIZE_1         /*!< Peripheral data alignment : 
 311:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 312:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 313:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 314:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 315:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MDATAALIGN Memory data alignment
 316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 317:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 318:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_BYTE            0x00000000U             /*!< Memory data alignment : Byte
 319:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_HALFWORD        DMA_CCR_MSIZE_0         /*!< Memory data alignment : Half
 320:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_WORD            DMA_CCR_MSIZE_1         /*!< Memory data alignment : Word
 321:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 322:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 323:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 324:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 325:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PRIORITY Transfer Priority level
 326:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
ARM GAS  /tmp/cc5dAlVC.s 			page 51


 327:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 328:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_PRIORITY_LOW               0x00000000U             /*!< Priority level : Low       *
 329:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_PRIORITY_MEDIUM            DMA_CCR_PL_0            /*!< Priority level : Medium    *
 330:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_PRIORITY_HIGH              DMA_CCR_PL_1            /*!< Priority level : High      *
 331:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_PRIORITY_VERYHIGH          DMA_CCR_PL              /*!< Priority level : Very_High *
 332:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 333:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 334:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 335:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 336:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 337:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 338:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 339:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 340:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Exported macro ------------------------------------------------------------*/
 341:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Macros DMA Exported Macros
 342:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 343:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 344:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 345:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EM_WRITE_READ Common Write and read registers macros
 346:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 347:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 348:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 349:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Write a value in DMA register
 350:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 351:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  __REG__ Register to be written
 352:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  __VALUE__ Value to be written in the register
 353:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 354:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 355:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 356:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 357:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 358:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Read a value in DMA register
 359:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 360:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  __REG__ Register to be read
 361:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Register value
 362:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 363:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 364:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 365:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 366:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 367:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 368:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EM_CONVERT_DMAxCHANNELy Convert DMAxChannely
 369:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 370:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 371:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 372:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into DMAx
 373:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 374:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval DMAx
 375:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 376:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)  (DMA1)
 377:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 378:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 379:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into LL_DMA_CHANNEL_y
 380:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 381:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval LL_DMA_CHANNEL_y
 382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 383:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel6) && defined(DMA1_Channel7)
ARM GAS  /tmp/cc5dAlVC.s 			page 52


 384:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 385:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 386:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 387:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 388:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 389:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 390:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 392:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #else
 393:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 394:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 395:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 397:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  LL_DMA_CHANNEL_5)
 399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
 400:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 401:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 402:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Convert DMA Instance DMAx and LL_DMA_CHANNEL_y into DMAx_Channely
 403:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
 404:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  __CHANNEL__ LL_DMA_CHANNEL_y
 405:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval DMAx_Channely
 406:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 407:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #if defined(DMA1_Channel6) && defined(DMA1_Channel7)
 408:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 409:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 410:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 411:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 412:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 413:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 414:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 415:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  DMA1_Channel7)
 416:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #else
 417:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 418:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 419:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 420:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 421:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 422:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  DMA1_Channel5)
 423:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** #endif
 424:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 425:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 426:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 428:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 430:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @}
 431:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 432:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 433:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /* Exported functions --------------------------------------------------------*/
 434:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Functions DMA Exported Functions
 435:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  * @{
 436:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****  */
 437:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 438:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /** @defgroup DMA_LL_EF_Configuration Configuration
 439:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @{
 440:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
ARM GAS  /tmp/cc5dAlVC.s 			page 53


 441:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 442:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Enable DMA channel.
 443:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_EnableChannel
 444:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 445:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 446:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 447:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 448:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 449:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 450:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 451:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 452:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 453:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 454:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 455:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 456:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 457:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 458:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel-1U]))->CCR, DMA_CCR_E
 459:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 460:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 461:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 462:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Disable DMA channel.
 463:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_DisableChannel
 464:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 465:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 466:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 467:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 468:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 469:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 470:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 471:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 472:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 473:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 474:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 475:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 476:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 477:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 478:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel-1U]))->CCR, DMA_CCR
 479:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 480:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 481:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 482:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Check if DMA channel is enabled or disabled.
 483:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_IsEnabledChannel
 484:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 485:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 486:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 487:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 488:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 489:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 490:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 491:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 492:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 493:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval State of bit (1 or 0).
 494:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 495:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 496:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 497:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
ARM GAS  /tmp/cc5dAlVC.s 			page 54


 498:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CC
 499:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                   DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 500:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 501:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 502:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 503:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Configure all parameters link to DMA transfer.
 504:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_ConfigTransfer\n
 505:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_ConfigTransfer\n
 506:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CCR          CIRC          LL_DMA_ConfigTransfer\n
 507:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CCR          PINC          LL_DMA_ConfigTransfer\n
 508:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CCR          MINC          LL_DMA_ConfigTransfer\n
 509:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CCR          PSIZE         LL_DMA_ConfigTransfer\n
 510:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CCR          MSIZE         LL_DMA_ConfigTransfer\n
 511:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CCR          PL            LL_DMA_ConfigTransfer
 512:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 513:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 514:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 515:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 516:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 517:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 518:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 519:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 520:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 521:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Configuration This parameter must be a combination of all the following values:
 522:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH o
 523:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR
 524:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
 525:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
 526:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDAT
 527:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDAT
 528:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HI
 529:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 530:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 531:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configurat
 532:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 533:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 534:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 535:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_P
 536:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Configuration);
 537:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 538:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 539:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 540:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set Data transfer direction (read from peripheral or from memory).
 541:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_SetDataTransferDirection\n
 542:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_SetDataTransferDirection
 543:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 544:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 545:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 546:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 547:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 548:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 549:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 550:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 551:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 552:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 553:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 554:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
ARM GAS  /tmp/cc5dAlVC.s 			page 55


 555:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 556:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 557:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 558:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t 
 559:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 560:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 603              		.loc 4 561 3 view .LVU218
 604 011a 504E     		ldr	r6, .L8+28
 605              	.LBE114:
 606              	.LBE113:
 607              	.LBB116:
 608              	.LBB112:
 609              		.loc 3 428 12 view .LVU219
 610 011c 0B40     		ands	r3, r1
 611              		.loc 3 428 10 view .LVU220
 612 011e 0493     		str	r3, [sp, #16]
 429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_bus.h ****   (void)tmpreg;
 613              		.loc 3 429 3 is_stmt 1 view .LVU221
 614 0120 049B     		ldr	r3, [sp, #16]
 615              	.LVL24:
 616              		.loc 3 429 3 is_stmt 0 view .LVU222
 617              	.LBE112:
 618              	.LBE116:
 619              	.LBE180:
 333:Src/main.c    **** 
 620              		.loc 1 333 3 is_stmt 1 view .LVU223
 621              	.LBB181:
 622              	.LBB117:
 623              	.LBI117:
 562:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 563:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 564:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 565:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 566:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get Data transfer direction (read from peripheral or from memory).
 567:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_GetDataTransferDirection\n
 568:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_GetDataTransferDirection
 569:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 570:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 571:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 572:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 573:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 574:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 575:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 576:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 577:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 578:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 579:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 580:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 581:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 582:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 583:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
 584:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 585:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 586:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR
 587:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                    DMA_CCR_DIR | DMA_CCR_MEM2MEM));
 588:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
ARM GAS  /tmp/cc5dAlVC.s 			page 56


 589:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 590:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 591:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set DMA mode circular or normal.
 592:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note The circular buffer mode cannot be used if the memory-to-memory
 593:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * data transfer is configured on the selected Channel.
 594:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_SetMode
 595:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 596:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 597:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 598:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 599:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 600:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 601:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 602:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 603:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 604:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Mode This parameter can be one of the following values:
 605:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 606:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 607:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 608:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 609:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
 610:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 611:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 613:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Mode);
 614:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 615:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 616:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 617:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get DMA mode circular or normal.
 618:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_GetMode
 619:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 620:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 621:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 622:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 623:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 624:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 625:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 626:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 627:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 628:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 629:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 630:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 631:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 632:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
 633:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 634:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 635:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR
 636:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                    DMA_CCR_CIRC));
 637:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 638:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 639:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 640:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set Peripheral increment mode.
 641:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
 642:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 643:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 644:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 645:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
ARM GAS  /tmp/cc5dAlVC.s 			page 57


 646:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 647:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 648:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 649:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 650:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 651:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
 652:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 653:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 654:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 655:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 656:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOr
 657:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 658:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****     uint32_t dma_base_addr = (uint32_t)DMAx;
 659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****     MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DM
 660:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 661:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 662:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 663:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 664:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get Peripheral increment mode.
 665:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
 666:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 667:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 668:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 670:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 671:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 672:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 673:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 674:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 676:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 678:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 679:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 680:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 681:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 682:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR
 683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                    DMA_CCR_PINC));
 684:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 685:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 687:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set Memory increment mode.
 688:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
 689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 690:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 691:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 692:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 693:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 694:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 695:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 696:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 697:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 698:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
 699:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 700:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 701:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 702:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
ARM GAS  /tmp/cc5dAlVC.s 			page 58


 703:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOr
 704:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 705:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 707:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 708:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 709:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 710:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 711:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get Memory increment mode.
 712:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
 713:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 714:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 715:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 716:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 717:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 718:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 719:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 720:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 721:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 722:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 723:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 724:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 725:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 726:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 727:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 728:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 729:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR
 730:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                    DMA_CCR_MINC));
 731:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 732:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 733:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 734:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set Peripheral size.
 735:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
 736:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 737:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 738:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 739:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 740:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 741:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 742:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 743:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 744:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 745:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
 746:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 747:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 748:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 749:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 750:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 751:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2M
 752:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 755:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 756:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 757:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 758:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 759:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get Peripheral size.
ARM GAS  /tmp/cc5dAlVC.s 			page 59


 760:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
 761:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 762:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 763:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 764:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 765:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 766:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 767:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 768:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 769:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 770:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 771:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 772:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 773:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 774:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 775:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
 776:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 777:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 778:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR
 779:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                    DMA_CCR_PSIZE));
 780:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 781:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 782:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 783:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set Memory size.
 784:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
 785:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 786:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 788:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 791:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 792:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 793:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 794:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
 795:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 796:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 797:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 798:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 799:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 800:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2M
 801:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 802:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 804:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 805:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 806:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 807:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 808:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get Memory size.
 809:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_GetMemorySize
 810:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 811:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 812:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 813:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 814:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 815:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 816:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
ARM GAS  /tmp/cc5dAlVC.s 			page 60


 817:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 818:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 819:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 820:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 821:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 822:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 823:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 824:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
 825:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 826:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 827:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR
 828:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                    DMA_CCR_MSIZE));
 829:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 830:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 831:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 832:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set Channel priority level.
 833:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_SetChannelPriorityLevel
 834:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 835:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 836:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 837:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 838:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 839:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 840:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 841:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 842:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 843:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Priority This parameter can be one of the following values:
 844:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 845:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 846:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 847:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 848:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 849:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t P
 851:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 852:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 854:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Priority);
 855:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 856:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 857:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 858:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get Channel priority level.
 859:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_GetChannelPriorityLevel
 860:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 861:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 862:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 863:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 864:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 865:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 866:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 867:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 868:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 869:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 870:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 871:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 872:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 873:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
ARM GAS  /tmp/cc5dAlVC.s 			page 61


 874:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 875:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel)
 876:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 877:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 878:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR
 879:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                    DMA_CCR_PL));
 880:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 881:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 882:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set Number of data to transfer.
 884:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   This action has no effect if
 885:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         channel is enabled.
 886:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_SetDataLength
 887:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 888:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 889:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 890:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 891:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 892:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 893:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 894:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 895:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
 897:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 898:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 899:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
 900:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 901:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 902:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 903:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
 904:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 905:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 906:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 907:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get Number of data to transfer.
 908:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Once the channel is enabled, the return value indicate the
 909:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         remaining bytes to be transmitted.
 910:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_GetDataLength
 911:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 912:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 913:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 914:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 915:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 916:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 917:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 918:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 919:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 920:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
 921:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 922:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
 923:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 924:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 925:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CND
 926:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 927:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 928:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 929:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 930:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Configure the Source and Destination addresses.
ARM GAS  /tmp/cc5dAlVC.s 			page 62


 931:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
 932:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Each peripheral using DMA provides an API to get directly the register adress (LL_PPP_D
 933:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_ConfigAddresses\n
 934:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         CMAR         MA            LL_DMA_ConfigAddresses
 935:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 936:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 937:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 938:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 939:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 940:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 941:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 942:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 943:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 944:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  SrcAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
 945:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DstAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
 946:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 947:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 948:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 949:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 950:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 951:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 952:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddres
 953:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****                                             uint32_t DstAddress, uint32_t Direction)
 954:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 955:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 956:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   /* Direction Memory to Periph */
 957:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 958:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   {
 959:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, Sr
 960:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, Ds
 961:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   }
 962:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   /* Direction Periph to Memory and Memory to Memory */
 963:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   else
 964:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   {
 965:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, Sr
 966:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, Ds
 967:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   }
 968:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 969:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 970:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 971:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set the Memory address.
 972:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
 973:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
 974:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetMemoryAddress
 975:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 976:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 977:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 978:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 979:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 980:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 981:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 982:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 983:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 984:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
 985:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
 986:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
 987:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
ARM GAS  /tmp/cc5dAlVC.s 			page 63


 988:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 989:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 990:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, Memo
 991:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
 992:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
 993:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
 994:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set the Peripheral address.
 995:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
 996:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
 997:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetPeriphAddress
 998:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 999:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1000:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1001:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1002:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1003:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1004:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1005:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1006:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1007:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1008:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
1009:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
1010:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAd
1011:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
1012:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1013:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, Peri
1014:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
1015:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
1016:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
1017:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get Memory address.
1018:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1019:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetMemoryAddress
1020:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1021:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1022:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1023:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1024:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1025:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1026:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1027:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1028:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1029:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1030:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
1031:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1032:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
1033:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1034:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMA
1035:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
1036:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
1037:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
1038:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get Peripheral address.
1039:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1040:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetPeriphAddress
1041:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1042:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1043:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1044:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
ARM GAS  /tmp/cc5dAlVC.s 			page 64


1045:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1046:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1047:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1048:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1049:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1050:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1051:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
1052:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1053:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
1054:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1055:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPA
1056:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
1057:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
1058:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
1059:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set the Memory to Memory Source address.
1060:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1061:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1062:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetM2MSrcAddress
1063:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1064:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1065:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1066:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1067:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1068:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1069:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1070:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1071:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1072:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1073:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
1074:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
1075:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1076:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
1077:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1078:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, Memo
1079:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
1080:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
1081:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
1082:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set the Memory to Memory Destination address.
1083:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1084:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1085:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetM2MDstAddress
1086:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1087:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1088:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1089:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1090:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1091:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1092:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1093:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1094:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1095:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1096:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
1097:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
1098:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1099:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
1100:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1101:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, Memo
ARM GAS  /tmp/cc5dAlVC.s 			page 65


1102:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
1103:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
1104:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
1105:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get the Memory to Memory Source address.
1106:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1107:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetM2MSrcAddress
1108:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1109:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1110:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1111:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1112:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1113:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1114:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1115:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1116:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1117:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1118:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
1119:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1120:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
1121:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1122:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPA
1123:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
1124:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
1125:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
1126:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Get the Memory to Memory Destination address.
1127:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1128:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetM2MDstAddress
1129:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1130:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1131:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1132:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1133:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1134:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1135:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1136:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1137:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1138:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1139:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
1140:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1141:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
1142:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1143:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMA
1144:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** }
1145:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** 
1146:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** /**
1147:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @brief  Set DMA request for DMA Channels on DMAMUX Channel x.
1148:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @note   DMAMUX channel 0 to 6 are mapped to DMA1 channel 1 to 7.
1149:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @rmtoll CxCR         DMAREQ_ID     LL_DMA_SetPeriphRequest
1150:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1151:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1152:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1153:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1154:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1155:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1156:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1157:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1158:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
ARM GAS  /tmp/cc5dAlVC.s 			page 66


1159:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @param  Request This parameter can be one of the following values:
1160:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_MEM2MEM
1161:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR0
1162:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR1
1163:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR2
1164:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR3
1165:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC1
1166:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_IN
1167:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_OUT
1168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH1
1169:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH2
1170:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_RX
1171:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_TX
1172:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_RX
1173:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_TX
1174:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_RX
1175:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_TX
1176:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_RX
1177:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_TX
1178:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_RX
1179:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_TX
1180:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH1
1181:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH2
1182:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH3
1183:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH4
1184:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_TRIG_COM
1185:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_UP
1186:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH1
1187:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH2
1188:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH3
1189:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH4
1190:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_TRIG
1191:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_UP
1192:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH1
1193:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH2
1194:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH3
1195:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH4
1196:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_TRIG
1197:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_UP
1198:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM6_UP
1199:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM7_UP
1200:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_CH1
1201:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_CH2
1202:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_TRIG_COM
1203:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_UP
1204:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_CH1
1205:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_TRIG_COM
1206:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_UP
1207:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_CH1
1208:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_TRIG_COM
1209:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_UP
1210:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_RX
1211:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_TX
1212:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_RX
1213:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_TX
1214:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_RX
1215:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_TX
ARM GAS  /tmp/cc5dAlVC.s 			page 67


1216:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART4_RX
1217:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART4_TX
1218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UCPD1_RX
1219:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
1220:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
1221:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
1222:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   * @retval None
1223:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   */
1224:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
 624              		.loc 4 1224 22 view .LVU224
 625              	.LBB118:
1225:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
1226:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   (void)(DMAx);
 626              		.loc 4 1226 3 view .LVU225
1227:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel -
 627              		.loc 4 1227 3 view .LVU226
 628 0122 FF23     		movs	r3, #255
 629 0124 4E49     		ldr	r1, .L8+32
 630 0126 9C46     		mov	ip, r3
 631 0128 0A68     		ldr	r2, [r1]
 632              	.LBE118:
 633              	.LBE117:
 634              	.LBB120:
 635              	.LBB121:
 636 012a 4E48     		ldr	r0, .L8+36
 637              	.LBE121:
 638              	.LBE120:
 639              	.LBB123:
 640              	.LBB119:
 641 012c 9A43     		bics	r2, r3
 642 012e C33B     		subs	r3, r3, #195
 643 0130 1343     		orrs	r3, r2
 644 0132 0B60     		str	r3, [r1]
 645              	.LVL25:
 646              		.loc 4 1227 3 is_stmt 0 view .LVU227
 647              	.LBE119:
 648              	.LBE123:
 649              	.LBE181:
 335:Src/main.c    **** 
 650              		.loc 1 335 3 is_stmt 1 view .LVU228
 651              	.LBB182:
 652              	.LBB124:
 653              	.LBI113:
 558:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 654              		.loc 4 558 22 view .LVU229
 655              	.LBB115:
 560:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 656              		.loc 4 560 3 view .LVU230
 561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 657              		.loc 4 561 3 view .LVU231
 658 0134 4C4B     		ldr	r3, .L8+40
 659 0136 1A68     		ldr	r2, [r3]
 660 0138 3240     		ands	r2, r6
 661 013a 1A60     		str	r2, [r3]
 662              	.LVL26:
 561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 663              		.loc 4 561 3 is_stmt 0 view .LVU232
ARM GAS  /tmp/cc5dAlVC.s 			page 68


 664              	.LBE115:
 665              	.LBE124:
 666              	.LBE182:
 337:Src/main.c    **** 
 667              		.loc 1 337 3 is_stmt 1 view .LVU233
 668              	.LBB183:
 669              	.LBB125:
 670              	.LBI125:
 850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 671              		.loc 4 850 22 view .LVU234
 672              	.LBB126:
 852:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 673              		.loc 4 852 3 view .LVU235
 853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Priority);
 674              		.loc 4 853 3 view .LVU236
 675 013c 1A68     		ldr	r2, [r3]
 676 013e 4B4E     		ldr	r6, .L8+44
 677 0140 3240     		ands	r2, r6
 678              	.LBE126:
 679              	.LBE125:
 680              	.LBB128:
 681              	.LBB129:
 612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Mode);
 682              		.loc 4 612 3 is_stmt 0 view .LVU237
 683 0142 2026     		movs	r6, #32
 684              	.LBE129:
 685              	.LBE128:
 686              	.LBB131:
 687              	.LBB127:
 853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Priority);
 688              		.loc 4 853 3 view .LVU238
 689 0144 1A60     		str	r2, [r3]
 690              	.LVL27:
 853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Priority);
 691              		.loc 4 853 3 view .LVU239
 692              	.LBE127:
 693              	.LBE131:
 694              	.LBE183:
 339:Src/main.c    **** 
 695              		.loc 1 339 3 is_stmt 1 view .LVU240
 696              	.LBB184:
 697              	.LBB132:
 698              	.LBI128:
 609:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 699              		.loc 4 609 22 view .LVU241
 700              	.LBB130:
 611:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 701              		.loc 4 611 3 view .LVU242
 612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Mode);
 702              		.loc 4 612 3 view .LVU243
 703 0146 1A68     		ldr	r2, [r3]
 704 0148 B243     		bics	r2, r6
 705 014a 1A60     		str	r2, [r3]
 706              	.LVL28:
 612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Mode);
 707              		.loc 4 612 3 is_stmt 0 view .LVU244
 708              	.LBE130:
ARM GAS  /tmp/cc5dAlVC.s 			page 69


 709              	.LBE132:
 710              	.LBE184:
 341:Src/main.c    **** 
 711              		.loc 1 341 3 is_stmt 1 view .LVU245
 712              	.LBB185:
 713              	.LBB133:
 714              	.LBI133:
 656:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 715              		.loc 4 656 22 view .LVU246
 716              	.LBB134:
 658:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****     MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DM
 717              		.loc 4 658 5 view .LVU247
 659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 718              		.loc 4 659 5 view .LVU248
 719 014c 1A68     		ldr	r2, [r3]
 720 014e B619     		adds	r6, r6, r6
 721 0150 B243     		bics	r2, r6
 722 0152 1A60     		str	r2, [r3]
 723              	.LVL29:
 659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 724              		.loc 4 659 5 is_stmt 0 view .LVU249
 725              	.LBE134:
 726              	.LBE133:
 727              	.LBE185:
 343:Src/main.c    **** 
 728              		.loc 1 343 3 is_stmt 1 view .LVU250
 729              	.LBB186:
 730              	.LBB135:
 731              	.LBI135:
 703:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 732              		.loc 4 703 22 view .LVU251
 733              	.LBB136:
 705:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 734              		.loc 4 705 3 view .LVU252
 706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 735              		.loc 4 706 3 view .LVU253
 736 0154 8022     		movs	r2, #128
 737 0156 1968     		ldr	r1, [r3]
 738              	.LBE136:
 739              	.LBE135:
 740              	.LBB138:
 741              	.LBB139:
 754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 742              		.loc 4 754 3 is_stmt 0 view .LVU254
 743 0158 454E     		ldr	r6, .L8+48
 744              	.LBE139:
 745              	.LBE138:
 746              	.LBB141:
 747              	.LBB137:
 706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 748              		.loc 4 706 3 view .LVU255
 749 015a 9143     		bics	r1, r2
 750 015c 1143     		orrs	r1, r2
 751 015e 1960     		str	r1, [r3]
 752              	.LVL30:
 706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 753              		.loc 4 706 3 view .LVU256
ARM GAS  /tmp/cc5dAlVC.s 			page 70


 754              	.LBE137:
 755              	.LBE141:
 756              	.LBE186:
 345:Src/main.c    **** 
 757              		.loc 1 345 3 is_stmt 1 view .LVU257
 758              	.LBB187:
 759              	.LBB142:
 760              	.LBI138:
 751:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 761              		.loc 4 751 22 view .LVU258
 762              	.LBB140:
 753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 763              		.loc 4 753 3 view .LVU259
 754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 764              		.loc 4 754 3 view .LVU260
 765 0160 1968     		ldr	r1, [r3]
 766 0162 3140     		ands	r1, r6
 767 0164 1960     		str	r1, [r3]
 768              	.LVL31:
 754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 769              		.loc 4 754 3 is_stmt 0 view .LVU261
 770              	.LBE140:
 771              	.LBE142:
 772              	.LBE187:
 347:Src/main.c    **** 
 773              		.loc 1 347 3 is_stmt 1 view .LVU262
 774              	.LBB188:
 775              	.LBB143:
 776              	.LBI143:
 800:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 777              		.loc 4 800 22 view .LVU263
 778              	.LBB144:
 802:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 779              		.loc 4 802 3 view .LVU264
 803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 780              		.loc 4 803 3 view .LVU265
 781 0166 1968     		ldr	r1, [r3]
 782 0168 424E     		ldr	r6, .L8+52
 783 016a 3140     		ands	r1, r6
 784 016c 1960     		str	r1, [r3]
 785              	.LVL32:
 803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 786              		.loc 4 803 3 is_stmt 0 view .LVU266
 787              	.LBE144:
 788              	.LBE143:
 789              	.LBE188:
 350:Src/main.c    **** 
 790              		.loc 1 350 3 is_stmt 1 view .LVU267
 791              	.LBB189:
 792              	.LBB145:
 793              	.LBI120:
1224:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 794              		.loc 4 1224 22 view .LVU268
 795              	.LBB122:
1226:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel -
 796              		.loc 4 1226 3 view .LVU269
 797              		.loc 4 1227 3 view .LVU270
ARM GAS  /tmp/cc5dAlVC.s 			page 71


 798 016e 6346     		mov	r3, ip
 799 0170 0168     		ldr	r1, [r0]
 800 0172 9943     		bics	r1, r3
 801 0174 C23B     		subs	r3, r3, #194
 802 0176 0B43     		orrs	r3, r1
 803 0178 0360     		str	r3, [r0]
 804              	.LVL33:
 805              		.loc 4 1227 3 is_stmt 0 view .LVU271
 806              	.LBE122:
 807              	.LBE145:
 808              	.LBE189:
 352:Src/main.c    **** 
 809              		.loc 1 352 3 is_stmt 1 view .LVU272
 810              	.LBB190:
 811              	.LBB146:
 812              	.LBI146:
 558:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 813              		.loc 4 558 22 view .LVU273
 814              	.LBB147:
 560:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 815              		.loc 4 560 3 view .LVU274
 561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 816              		.loc 4 561 3 view .LVU275
 817 017a 3F4B     		ldr	r3, .L8+56
 818 017c 3749     		ldr	r1, .L8+28
 819 017e 1868     		ldr	r0, [r3]
 820 0180 0840     		ands	r0, r1
 821 0182 1021     		movs	r1, #16
 822 0184 0143     		orrs	r1, r0
 823 0186 1960     		str	r1, [r3]
 824              	.LVL34:
 561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 825              		.loc 4 561 3 is_stmt 0 view .LVU276
 826              	.LBE147:
 827              	.LBE146:
 828              	.LBE190:
 354:Src/main.c    **** 
 829              		.loc 1 354 3 is_stmt 1 view .LVU277
 830              	.LBB191:
 831              	.LBB148:
 832              	.LBI148:
 850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 833              		.loc 4 850 22 view .LVU278
 834              	.LBB149:
 852:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 835              		.loc 4 852 3 view .LVU279
 853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Priority);
 836              		.loc 4 853 3 view .LVU280
 837 0188 1968     		ldr	r1, [r3]
 838 018a 3848     		ldr	r0, .L8+44
 839 018c 0140     		ands	r1, r0
 840              	.LBE149:
 841              	.LBE148:
 842              	.LBB151:
 843              	.LBB152:
 612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Mode);
 844              		.loc 4 612 3 is_stmt 0 view .LVU281
ARM GAS  /tmp/cc5dAlVC.s 			page 72


 845 018e 2020     		movs	r0, #32
 846              	.LBE152:
 847              	.LBE151:
 848              	.LBB154:
 849              	.LBB150:
 853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Priority);
 850              		.loc 4 853 3 view .LVU282
 851 0190 1960     		str	r1, [r3]
 852              	.LVL35:
 853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Priority);
 853              		.loc 4 853 3 view .LVU283
 854              	.LBE150:
 855              	.LBE154:
 856              	.LBE191:
 356:Src/main.c    **** 
 857              		.loc 1 356 3 is_stmt 1 view .LVU284
 858              	.LBB192:
 859              	.LBB155:
 860              	.LBI151:
 609:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 861              		.loc 4 609 22 view .LVU285
 862              	.LBB153:
 611:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 863              		.loc 4 611 3 view .LVU286
 612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Mode);
 864              		.loc 4 612 3 view .LVU287
 865 0192 1968     		ldr	r1, [r3]
 866 0194 8143     		bics	r1, r0
 867 0196 1960     		str	r1, [r3]
 868              	.LVL36:
 612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              Mode);
 869              		.loc 4 612 3 is_stmt 0 view .LVU288
 870              	.LBE153:
 871              	.LBE155:
 872              	.LBE192:
 358:Src/main.c    **** 
 873              		.loc 1 358 3 is_stmt 1 view .LVU289
 874              	.LBB193:
 875              	.LBB156:
 876              	.LBI156:
 656:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 877              		.loc 4 656 22 view .LVU290
 878              	.LBB157:
 658:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****     MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DM
 879              		.loc 4 658 5 view .LVU291
 659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 880              		.loc 4 659 5 view .LVU292
 881 0198 1968     		ldr	r1, [r3]
 882 019a 0018     		adds	r0, r0, r0
 883 019c 8143     		bics	r1, r0
 884 019e 1960     		str	r1, [r3]
 885              	.LVL37:
 659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 886              		.loc 4 659 5 is_stmt 0 view .LVU293
 887              	.LBE157:
 888              	.LBE156:
 889              	.LBE193:
ARM GAS  /tmp/cc5dAlVC.s 			page 73


 360:Src/main.c    **** 
 890              		.loc 1 360 3 is_stmt 1 view .LVU294
 891              	.LBB194:
 892              	.LBB158:
 893              	.LBI158:
 703:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 894              		.loc 4 703 22 view .LVU295
 895              	.LBB159:
 705:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 896              		.loc 4 705 3 view .LVU296
 706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 897              		.loc 4 706 3 view .LVU297
 898 01a0 1968     		ldr	r1, [r3]
 899              	.LBE159:
 900              	.LBE158:
 901              	.LBB161:
 902              	.LBB162:
 754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 903              		.loc 4 754 3 is_stmt 0 view .LVU298
 904 01a2 3348     		ldr	r0, .L8+48
 905              	.LBE162:
 906              	.LBE161:
 907              	.LBB165:
 908              	.LBB160:
 706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 909              		.loc 4 706 3 view .LVU299
 910 01a4 9143     		bics	r1, r2
 911 01a6 0A43     		orrs	r2, r1
 912 01a8 1A60     		str	r2, [r3]
 913              	.LVL38:
 706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 914              		.loc 4 706 3 view .LVU300
 915              	.LBE160:
 916              	.LBE165:
 917              	.LBE194:
 362:Src/main.c    **** 
 918              		.loc 1 362 3 is_stmt 1 view .LVU301
 919              	.LBB195:
 920              	.LBB166:
 921              	.LBI161:
 751:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 922              		.loc 4 751 22 view .LVU302
 923              	.LBB163:
 753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 924              		.loc 4 753 3 view .LVU303
 754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 925              		.loc 4 754 3 view .LVU304
 926 01aa 1A68     		ldr	r2, [r3]
 927              	.LBE163:
 928              	.LBE166:
 929              	.LBB167:
 930              	.LBB168:
 931              		.loc 2 852 52 is_stmt 0 view .LVU305
 932 01ac 2649     		ldr	r1, .L8+8
 933              	.LBE168:
 934              	.LBE167:
 935              	.LBB171:
ARM GAS  /tmp/cc5dAlVC.s 			page 74


 936              	.LBB164:
 754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 937              		.loc 4 754 3 view .LVU306
 938 01ae 0240     		ands	r2, r0
 939 01b0 1A60     		str	r2, [r3]
 940              	.LVL39:
 754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 941              		.loc 4 754 3 view .LVU307
 942              	.LBE164:
 943              	.LBE171:
 944              	.LBE195:
 364:Src/main.c    **** 
 945              		.loc 1 364 3 is_stmt 1 view .LVU308
 946              	.LBB196:
 947              	.LBB172:
 948              	.LBI172:
 800:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h **** {
 949              		.loc 4 800 22 view .LVU309
 950              	.LBB173:
 802:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_
 951              		.loc 4 802 3 view .LVU310
 803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 952              		.loc 4 803 3 view .LVU311
 953 01b2 1A68     		ldr	r2, [r3]
 954              	.LBE173:
 955              	.LBE172:
 956              	.LBB175:
 957              	.LBB169:
 958              		.loc 2 852 52 is_stmt 0 view .LVU312
 959 01b4 C220     		movs	r0, #194
 960              	.LBE169:
 961              	.LBE175:
 962              	.LBB176:
 963              	.LBB174:
 803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 964              		.loc 4 803 3 view .LVU313
 965 01b6 1640     		ands	r6, r2
 966 01b8 1E60     		str	r6, [r3]
 967              	.LVL40:
 803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 968              		.loc 4 803 3 view .LVU314
 969              	.LBE174:
 970              	.LBE176:
 971              	.LBE196:
 367:Src/main.c    ****   NVIC_EnableIRQ(UCPD1_2_IRQn);
 972              		.loc 1 367 3 is_stmt 1 view .LVU315
 973              	.LBB197:
 974              	.LBB177:
 975              	.LBI167:
 848:Drivers/CMSIS/Include/core_cm0plus.h **** {
 976              		.loc 2 848 22 view .LVU316
 977              	.LBB170:
 850:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 978              		.loc 2 850 3 view .LVU317
 979              		.loc 2 852 5 view .LVU318
 980              		.loc 2 852 33 is_stmt 0 view .LVU319
 981 01ba 6346     		mov	r3, ip
ARM GAS  /tmp/cc5dAlVC.s 			page 75


 982              		.loc 2 852 52 view .LVU320
 983 01bc 8000     		lsls	r0, r0, #2
 984 01be 0A58     		ldr	r2, [r1, r0]
 985              		.loc 2 852 33 view .LVU321
 986 01c0 9A43     		bics	r2, r3
 987              		.loc 2 852 102 view .LVU322
 988 01c2 3F3B     		subs	r3, r3, #63
 989 01c4 1343     		orrs	r3, r2
 990              		.loc 2 852 30 view .LVU323
 991 01c6 0B50     		str	r3, [r1, r0]
 992              	.LVL41:
 993              		.loc 2 852 30 view .LVU324
 994              	.LBE170:
 995              	.LBE177:
 996              	.LBE197:
 368:Src/main.c    **** 
 997              		.loc 1 368 3 is_stmt 1 view .LVU325
 998              	.LBB198:
 999              	.LBB178:
 1000              	.LBI178:
 741:Drivers/CMSIS/Include/core_cm0plus.h **** {
 1001              		.loc 2 741 22 view .LVU326
 1002              	.LBB179:
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 1003              		.loc 2 743 3 view .LVU327
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 1004              		.loc 2 745 5 view .LVU328
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 1005              		.loc 2 745 20 is_stmt 0 view .LVU329
 1006 01c8 8023     		movs	r3, #128
 1007 01ca 5B00     		lsls	r3, r3, #1
 1008 01cc 0B60     		str	r3, [r1]
 1009              	.LVL42:
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 1010              		.loc 2 745 20 view .LVU330
 1011              	.LBE179:
 1012              	.LBE178:
 1013              	.LBE198:
 107:Src/main.c    ****   MX_LPUART1_UART_Init();
 1014              		.loc 1 107 3 is_stmt 1 view .LVU331
 1015 01ce FFF7FEFF 		bl	MX_USBPD_Init
 1016              	.LVL43:
 108:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1017              		.loc 1 108 3 view .LVU332
 1018              	.LBB199:
 1019              	.LBI199:
 272:Src/main.c    **** {
 1020              		.loc 1 272 13 view .LVU333
 1021              	.LBB200:
 282:Src/main.c    ****   hlpuart1.Init.BaudRate = 209700;
 1022              		.loc 1 282 3 view .LVU334
 282:Src/main.c    ****   hlpuart1.Init.BaudRate = 209700;
 1023              		.loc 1 282 21 is_stmt 0 view .LVU335
 1024 01d2 2A4E     		ldr	r6, .L8+60
 1025 01d4 2A4B     		ldr	r3, .L8+64
 293:Src/main.c    ****   {
 1026              		.loc 1 293 7 view .LVU336
ARM GAS  /tmp/cc5dAlVC.s 			page 76


 1027 01d6 3000     		movs	r0, r6
 282:Src/main.c    ****   hlpuart1.Init.BaudRate = 209700;
 1028              		.loc 1 282 21 view .LVU337
 1029 01d8 3360     		str	r3, [r6]
 283:Src/main.c    ****   hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 1030              		.loc 1 283 3 is_stmt 1 view .LVU338
 283:Src/main.c    ****   hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 1031              		.loc 1 283 26 is_stmt 0 view .LVU339
 1032 01da 2A4B     		ldr	r3, .L8+68
 285:Src/main.c    ****   hlpuart1.Init.Parity = UART_PARITY_NONE;
 1033              		.loc 1 285 26 view .LVU340
 1034 01dc F460     		str	r4, [r6, #12]
 283:Src/main.c    ****   hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 1035              		.loc 1 283 26 view .LVU341
 1036 01de 7360     		str	r3, [r6, #4]
 284:Src/main.c    ****   hlpuart1.Init.StopBits = UART_STOPBITS_1;
 1037              		.loc 1 284 3 is_stmt 1 view .LVU342
 284:Src/main.c    ****   hlpuart1.Init.StopBits = UART_STOPBITS_1;
 1038              		.loc 1 284 28 is_stmt 0 view .LVU343
 1039 01e0 8023     		movs	r3, #128
 1040 01e2 5B05     		lsls	r3, r3, #21
 1041 01e4 B360     		str	r3, [r6, #8]
 285:Src/main.c    ****   hlpuart1.Init.Parity = UART_PARITY_NONE;
 1042              		.loc 1 285 3 is_stmt 1 view .LVU344
 286:Src/main.c    ****   hlpuart1.Init.Mode = UART_MODE_TX_RX;
 1043              		.loc 1 286 3 view .LVU345
 287:Src/main.c    ****   hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1044              		.loc 1 287 22 is_stmt 0 view .LVU346
 1045 01e6 0C23     		movs	r3, #12
 286:Src/main.c    ****   hlpuart1.Init.Mode = UART_MODE_TX_RX;
 1046              		.loc 1 286 24 view .LVU347
 1047 01e8 3461     		str	r4, [r6, #16]
 287:Src/main.c    ****   hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1048              		.loc 1 287 3 is_stmt 1 view .LVU348
 287:Src/main.c    ****   hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1049              		.loc 1 287 22 is_stmt 0 view .LVU349
 1050 01ea 7361     		str	r3, [r6, #20]
 288:Src/main.c    ****   hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1051              		.loc 1 288 3 is_stmt 1 view .LVU350
 288:Src/main.c    ****   hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1052              		.loc 1 288 27 is_stmt 0 view .LVU351
 1053 01ec B461     		str	r4, [r6, #24]
 289:Src/main.c    ****   hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 1054              		.loc 1 289 3 is_stmt 1 view .LVU352
 289:Src/main.c    ****   hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 1055              		.loc 1 289 32 is_stmt 0 view .LVU353
 1056 01ee 3462     		str	r4, [r6, #32]
 290:Src/main.c    ****   hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1057              		.loc 1 290 3 is_stmt 1 view .LVU354
 290:Src/main.c    ****   hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1058              		.loc 1 290 32 is_stmt 0 view .LVU355
 1059 01f0 7462     		str	r4, [r6, #36]
 291:Src/main.c    ****   hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 1060              		.loc 1 291 3 is_stmt 1 view .LVU356
 291:Src/main.c    ****   hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 1061              		.loc 1 291 40 is_stmt 0 view .LVU357
 1062 01f2 B462     		str	r4, [r6, #40]
ARM GAS  /tmp/cc5dAlVC.s 			page 77


 292:Src/main.c    ****   if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 1063              		.loc 1 292 3 is_stmt 1 view .LVU358
 292:Src/main.c    ****   if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 1064              		.loc 1 292 21 is_stmt 0 view .LVU359
 1065 01f4 7466     		str	r4, [r6, #100]
 293:Src/main.c    ****   {
 1066              		.loc 1 293 3 is_stmt 1 view .LVU360
 293:Src/main.c    ****   {
 1067              		.loc 1 293 7 is_stmt 0 view .LVU361
 1068 01f6 FFF7FEFF 		bl	HAL_UART_Init
 1069              	.LVL44:
 297:Src/main.c    ****   {
 1070              		.loc 1 297 3 is_stmt 1 view .LVU362
 297:Src/main.c    ****   {
 1071              		.loc 1 297 7 is_stmt 0 view .LVU363
 1072 01fa 2100     		movs	r1, r4
 1073 01fc 3000     		movs	r0, r6
 1074 01fe FFF7FEFF 		bl	HAL_UARTEx_SetTxFifoThreshold
 1075              	.LVL45:
 301:Src/main.c    ****   {
 1076              		.loc 1 301 3 is_stmt 1 view .LVU364
 301:Src/main.c    ****   {
 1077              		.loc 1 301 7 is_stmt 0 view .LVU365
 1078 0202 2100     		movs	r1, r4
 1079 0204 3000     		movs	r0, r6
 1080 0206 FFF7FEFF 		bl	HAL_UARTEx_SetRxFifoThreshold
 1081              	.LVL46:
 305:Src/main.c    ****   {
 1082              		.loc 1 305 3 is_stmt 1 view .LVU366
 305:Src/main.c    ****   {
 1083              		.loc 1 305 7 is_stmt 0 view .LVU367
 1084 020a 3000     		movs	r0, r6
 1085 020c FFF7FEFF 		bl	HAL_UARTEx_DisableFifoMode
 1086              	.LVL47:
 1087              	.LBE200:
 1088              	.LBE199:
 110:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 1089              		.loc 1 110 3 is_stmt 1 view .LVU368
 1090 0210 2800     		movs	r0, r5
 1091 0212 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 1092              	.LVL48:
 111:Src/main.c    ****   /* USER CODE END 2 */
 1093              		.loc 1 111 3 view .LVU369
 1094 0216 2800     		movs	r0, r5
 1095 0218 FFF7FEFF 		bl	HAL_ADC_Start
 1096              	.LVL49:
 114:Src/main.c    **** 
 1097              		.loc 1 114 3 view .LVU370
 1098 021c FFF7FEFF 		bl	MX_USBPD_Init
 1099              	.LVL50:
 134:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1100              		.loc 1 134 3 view .LVU371
 1101 0220 3A00     		movs	r2, r7
 1102 0222 194B     		ldr	r3, .L8+72
 1103 0224 23CB     		ldmia	r3!, {r0, r1, r5}
 1104 0226 23C2     		stmia	r2!, {r0, r1, r5}
 1105 0228 03CB     		ldmia	r3!, {r0, r1}
ARM GAS  /tmp/cc5dAlVC.s 			page 78


 1106 022a 03C2     		stmia	r2!, {r0, r1}
 135:Src/main.c    **** 
 1107              		.loc 1 135 3 view .LVU372
 135:Src/main.c    **** 
 1108              		.loc 1 135 23 is_stmt 0 view .LVU373
 1109 022c 2100     		movs	r1, r4
 1110 022e 3800     		movs	r0, r7
 1111 0230 FFF7FEFF 		bl	osThreadCreate
 1112              	.LVL51:
 135:Src/main.c    **** 
 1113              		.loc 1 135 21 view .LVU374
 1114 0234 154B     		ldr	r3, .L8+76
 1115 0236 1860     		str	r0, [r3]
 142:Src/main.c    **** 
 1116              		.loc 1 142 3 is_stmt 1 view .LVU375
 1117 0238 FFF7FEFF 		bl	osKernelStart
 1118              	.LVL52:
 1119              	.L7:
 148:Src/main.c    ****   {
 1120              		.loc 1 148 3 discriminator 1 view .LVU376
 153:Src/main.c    ****   /* USER CODE END 3 */
 1121              		.loc 1 153 3 discriminator 1 view .LVU377
 148:Src/main.c    ****   {
 1122              		.loc 1 148 9 discriminator 1 view .LVU378
 1123 023c FEE7     		b	.L7
 1124              	.L9:
 1125 023e C046     		.align	2
 1126              	.L8:
 1127 0240 00100240 		.word	1073876992
 1128 0244 00040050 		.word	1342178304
 1129 0248 00E100E0 		.word	-536813312
 1130 024c FFFF00FF 		.word	-16711681
 1131 0250 00000000 		.word	hadc1
 1132 0254 00240140 		.word	1073816576
 1133 0258 02000004 		.word	67108866
 1134 025c EFBFFFFF 		.word	-16401
 1135 0260 04080240 		.word	1073874948
 1136 0264 08080240 		.word	1073874952
 1137 0268 1C000240 		.word	1073872924
 1138 026c FFCFFFFF 		.word	-12289
 1139 0270 FFFCFFFF 		.word	-769
 1140 0274 FFF3FFFF 		.word	-3073
 1141 0278 30000240 		.word	1073872944
 1142 027c 00000000 		.word	hlpuart1
 1143 0280 00800040 		.word	1073774592
 1144 0284 24330300 		.word	209700
 1145 0288 00000000 		.word	.LANCHOR0
 1146 028c 00000000 		.word	defaultTaskHandle
 1147              		.cfi_endproc
 1148              	.LFE1069:
 1150              		.section	.text.Error_Handler,"ax",%progbits
 1151              		.align	1
 1152              		.global	Error_Handler
 1153              		.syntax unified
 1154              		.code	16
 1155              		.thumb_func
 1156              		.fpu softvfp
ARM GAS  /tmp/cc5dAlVC.s 			page 79


 1158              	Error_Handler:
 1159              	.LFB1077:
 445:Src/main.c    ****   }
 446:Src/main.c    ****   /* USER CODE END 5 */
 447:Src/main.c    **** }
 448:Src/main.c    **** 
 449:Src/main.c    **** /**
 450:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 451:Src/main.c    ****   * @retval None
 452:Src/main.c    ****   */
 453:Src/main.c    **** void Error_Handler(void)
 454:Src/main.c    **** {
 1160              		.loc 1 454 1 view -0
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 0
 1163              		@ frame_needed = 0, uses_anonymous_args = 0
 1164              		@ link register save eliminated.
 455:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 456:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 457:Src/main.c    **** 
 458:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 459:Src/main.c    **** }
 1165              		.loc 1 459 1 view .LVU380
 1166              		@ sp needed
 1167 0000 7047     		bx	lr
 1168              		.cfi_endproc
 1169              	.LFE1077:
 1171              		.comm	defaultTaskHandle,4,4
 1172              		.comm	hdma_lpuart1_tx,92,4
 1173              		.comm	hlpuart1,140,4
 1174              		.comm	hdma_adc1,92,4
 1175              		.comm	hadc1,100,4
 1176              		.comm	vin,4,4
 1177              		.comm	adc,2,2
 1178              		.section	.rodata
 1179              		.align	2
 1180              		.set	.LANCHOR0,. + 0
 1181              	.LC4:
 1182 0000 00000000 		.word	.LC0
 1183 0004 00000000 		.word	StartDefaultTask
 1184 0008 0000     		.short	0
 1185 000a 0000     		.space	2
 1186 000c 00000000 		.word	0
 1187 0010 80000000 		.word	128
 1188              		.text
 1189              	.Letext0:
 1190              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g071xx.h"
 1191              		.file 6 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1192              		.file 7 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/system_stm32g0xx.h"
 1193              		.file 8 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g0xx.h"
 1194              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 1195              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_rcc.h"
 1196              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_rcc_ex.h"
 1197              		.file 12 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_gpio.h"
 1198              		.file 13 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 1199              		.file 14 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_adc.h"
 1200              		.file 15 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_flash.h"
ARM GAS  /tmp/cc5dAlVC.s 			page 80


 1201              		.file 16 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart.h"
 1202              		.file 17 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 1203              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1204              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1205              		.file 20 "Middlewares/ST/STM32_USBPD_Library/Core/inc/usbpd_def.h"
 1206              		.file 21 "Middlewares/ST/STM32_USBPD_Library/Core/inc/usbpd_core.h"
 1207              		.file 22 "Inc/usbpd_dpm_core.h"
 1208              		.file 23 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_tim.h"
 1209              		.file 24 "Middlewares/ST/STM32_USBPD_Library/Devices/STM32G0XX/inc/usbpd_hw_if.h"
 1210              		.file 25 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_pwr_ex.h"
 1211              		.file 26 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_cortex.h"
 1212              		.file 27 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart_ex.h"
 1213              		.file 28 "Inc/usbpd.h"
 1214              		.file 29 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_adc_ex.h"
 1215              		.file 30 "<built-in>"
ARM GAS  /tmp/cc5dAlVC.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc5dAlVC.s:19     .text.StartDefaultTask:0000000000000000 $t
     /tmp/cc5dAlVC.s:27     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cc5dAlVC.s:55     .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc5dAlVC.s:62     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc5dAlVC.s:207    .text.SystemClock_Config:0000000000000088 $d
     /tmp/cc5dAlVC.s:212    .text.startup.main:0000000000000000 $t
     /tmp/cc5dAlVC.s:219    .text.startup.main:0000000000000000 main
     /tmp/cc5dAlVC.s:1127   .text.startup.main:0000000000000240 $d
                            *COM*:0000000000000064 hadc1
                            *COM*:000000000000008c hlpuart1
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/cc5dAlVC.s:1151   .text.Error_Handler:0000000000000000 $t
     /tmp/cc5dAlVC.s:1158   .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:000000000000005c hdma_lpuart1_tx
                            *COM*:000000000000005c hdma_adc1
                            *COM*:0000000000000004 vin
                            *COM*:0000000000000002 adc
     /tmp/cc5dAlVC.s:1179   .rodata:0000000000000000 $d

UNDEFINED SYMBOLS
osDelay
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
MX_USBPD_Init
HAL_UART_Init
HAL_UARTEx_SetTxFifoThreshold
HAL_UARTEx_SetRxFifoThreshold
HAL_UARTEx_DisableFifoMode
HAL_ADCEx_Calibration_Start
HAL_ADC_Start
osThreadCreate
osKernelStart
